module Haskell-Type-Declarations

imports
  Haskell-Types
  Haskell-Identifier-Sorts
  Haskell-Type-Classes

context-free syntax

  Topdecl.TypeDecl = "type" Tycon Tyvar* "=" Type 
  Topdecl.Data = "data" Context? Type "=" Constrs Deriving 
  Topdecl.NewTypeDecl = "newtype" Context? Type "=" Newconstr Deriving
  
context-free syntax

  Deriving.Derive = "deriving" Qtycls
  Deriving.NoDerivingPar =  "deriving" "(" ")" 
  Deriving.DerivePar = "deriving" "(" {Qtycls ","}+ ")" 
  Deriving.NoDeriving =  

context-free syntax

  Constrs.ConstrsList = <<{Constr " | "}+>>
  Constr.ConstrDecl = Conid Satype* 
  Constr.InfixConstr = Sbtype Conop Sbtype 
  Newconstr.ConIdType = Conid Type 
  Newconstr.ConIdLabel = Conid LabeledConstr 
  LabeledConstr.LabeledConstr = "{" Var "::" Type "}" {ignore-layout}
  Satype = AType 
  Satype.NotType = "!" AType 
  Sbtype = Type 
  Sbtype.NotType = "!" Type 
  
template options

  tokenize : "("
