Module("pp/Haskell-Expressions-pp",[Imports([Import("libstratego-gpp"),Import("libspoofax/sdf/pp"),Import("libspoofax/term/origin"),Import("libspoofax/term/annotation"),Import("libstratego-sglr"),Import("libstratego-sglr"),Import("signatures/Haskell-Expressions-sig")]),Imports([Import("signatures/Haskell-Identifier-Sorts-sig"),Import("signatures/Haskell-Literals-sig"),Import("signatures/Haskell-Patterns-sig"),Import("signatures/Haskell-Numbers-sig"),Import("signatures/Haskell-Statements-sig"),Import("signatures/Haskell-Type-Classes-sig"),Import("signatures/Haskell-Types-sig"),Import("signatures/Haskell-Value-Definitions-sig"),Import("signatures/Haskell-Case-Alternatives-sig")]),Imports([Import("pp/Haskell-Identifier-Sorts-pp"),Import("pp/Haskell-Literals-pp"),Import("pp/Haskell-Patterns-pp"),Import("pp/Haskell-Numbers-pp"),Import("pp/Haskell-Statements-pp"),Import("pp/Haskell-Type-Classes-pp"),Import("pp/Haskell-Types-pp"),Import("pp/Haskell-Value-Definitions-pp"),Import("pp/Haskell-Case-Alternatives-pp")]),Strategies([SDefNoArgs("prettyprint-example",CallNoArgs(SVar("prettyprint-Haskell"))),SDefNoArgs("prettyprint-Haskell",Fail),SDefT("prettyprint-Haskell",[],[DefaultVarDec("sort")],Fail)]),Strategies([SDefNoArgs("prettyprint-SDF-start-symbols",CallNoArgs(SVar("prettyprint-Haskell-start-symbols"))),SDefNoArgs("prettyprint-Haskell-start-symbols",Fail)]),Strategies([SDefNoArgs("prettyprint-Haskell",CallNoArgs(SVar("prettyprint-Haskell-AnyExp"))),SDefNoArgs("prettyprint-Haskell",CallNoArgs(SVar("prettyprint-Haskell-Exp"))),SDefNoArgs("prettyprint-Haskell",CallNoArgs(SVar("prettyprint-Haskell-Exps"))),SDefNoArgs("prettyprint-Haskell",CallNoArgs(SVar("prettyprint-Haskell-Exps2"))),SDefNoArgs("prettyprint-Haskell",CallNoArgs(SVar("prettyprint-Haskell-Fargs"))),RDefT("prettyprint-Haskell",[],[DefaultVarDec("sort")],Rule(Var("t"),RootApp(CallNoArgs(SVar("prettyprint-Haskell-AnyExp"))),BA(Match(NoAnnoList(Str("\"AnyExp\""))),Var("sort")))),RDefT("prettyprint-Haskell",[],[DefaultVarDec("sort")],Rule(Var("t"),RootApp(CallNoArgs(SVar("prettyprint-Haskell-Exp"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),RDefT("prettyprint-Haskell",[],[DefaultVarDec("sort")],Rule(Var("t"),RootApp(CallNoArgs(SVar("prettyprint-Haskell-Exps"))),BA(Match(NoAnnoList(Str("\"Exps\""))),Var("sort")))),RDefT("prettyprint-Haskell",[],[DefaultVarDec("sort")],Rule(Var("t"),RootApp(CallNoArgs(SVar("prettyprint-Haskell-Exps2"))),BA(Match(NoAnnoList(Str("\"Exps2\""))),Var("sort")))),RDefT("prettyprint-Haskell",[],[DefaultVarDec("sort")],Rule(Var("t"),RootApp(CallNoArgs(SVar("prettyprint-Haskell-Fargs"))),BA(Match(NoAnnoList(Str("\"Fargs\""))),Var("sort")))),RDefNoArgs("prettyprint-Haskell-AnyExp",Rule(Var("t1__"),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),Var("t1__'")]))])),[WhereClause(Not(CallNoArgs(SVar("is-Haskell-AnyExp")))),WhereClause(Assign(Var("t1__'"),App(Seq(CallT(SVar("clean-layout-empty-symbols"),[],[NoAnnoList(Str("\"\"")),NoAnnoList(Op("FALSE",[])),NoAnnoList(Op("FALSE",[]))]),CallNoArgs(SVar("flatten-list"))),NoAnnoList(List([App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-Haskell-Exp"))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))]))),Var("t1__"))])))))])),RDefNoArgs("prettyprint-Haskell-Exp",Rule(NoAnnoList(Op("Var",[Var("t1__")])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),Var("t1__'")]))])),[WithClause(Assign(Var("t1__'"),App(Seq(CallT(SVar("clean-layout-empty-symbols"),[],[NoAnnoList(Str("\"\"")),NoAnnoList(Op("FALSE",[])),NoAnnoList(Op("FALSE",[]))]),CallNoArgs(SVar("flatten-list"))),NoAnnoList(List([App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-Haskell-Qvar"))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))]))),Var("t1__"))])))))])),SDefNoArgs("is-Haskell-Exp",Match(NoAnnoList(Op("Var",[Wld])))),RDefNoArgs("Haskell-get-indent",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Var",[Var("t1__")]))),Var("index")])),Var("indent"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("indent"),NoAnnoList(Str("\"\""))))],Assign(Var("indent"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-separator",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Var",[Var("t1__")]))),Var("index")])),Var("separator"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("separator"),NoAnnoList(Str("\"\""))))],Assign(Var("separator"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-leading-ws",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Var",[Var("t1__")]))),Var("index")])),Var("ws"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("ws"),NoAnnoList(Str("\"\""))))],Assign(Var("ws"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("prettyprint-Haskell-Exp",Rule(NoAnnoList(Op("Constr",[Var("t1__")])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),Var("t1__'")]))])),[WithClause(Assign(Var("t1__'"),App(Seq(CallT(SVar("clean-layout-empty-symbols"),[],[NoAnnoList(Str("\"\"")),NoAnnoList(Op("FALSE",[])),NoAnnoList(Op("FALSE",[]))]),CallNoArgs(SVar("flatten-list"))),NoAnnoList(List([App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-Haskell-Gcon"))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))]))),Var("t1__"))])))))])),SDefNoArgs("is-Haskell-Exp",Match(NoAnnoList(Op("Constr",[Wld])))),RDefNoArgs("Haskell-get-indent",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Constr",[Var("t1__")]))),Var("index")])),Var("indent"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("indent"),NoAnnoList(Str("\"\""))))],Assign(Var("indent"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-separator",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Constr",[Var("t1__")]))),Var("index")])),Var("separator"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("separator"),NoAnnoList(Str("\"\""))))],Assign(Var("separator"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-leading-ws",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Constr",[Var("t1__")]))),Var("index")])),Var("ws"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("ws"),NoAnnoList(Str("\"\""))))],Assign(Var("ws"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("prettyprint-Haskell-Exp",Rule(NoAnnoList(Op("Lit",[Var("t1__")])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),Var("t1__'")]))])),[WithClause(Assign(Var("t1__'"),App(Seq(CallT(SVar("clean-layout-empty-symbols"),[],[NoAnnoList(Str("\"\"")),NoAnnoList(Op("FALSE",[])),NoAnnoList(Op("FALSE",[]))]),CallNoArgs(SVar("flatten-list"))),NoAnnoList(List([App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-Haskell-Literal"))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))]))),Var("t1__"))])))))])),SDefNoArgs("is-Haskell-Exp",Match(NoAnnoList(Op("Lit",[Wld])))),RDefNoArgs("Haskell-get-indent",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Lit",[Var("t1__")]))),Var("index")])),Var("indent"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("indent"),NoAnnoList(Str("\"\""))))],Assign(Var("indent"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-separator",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Lit",[Var("t1__")]))),Var("index")])),Var("separator"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("separator"),NoAnnoList(Str("\"\""))))],Assign(Var("separator"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-leading-ws",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Lit",[Var("t1__")]))),Var("index")])),Var("ws"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("ws"),NoAnnoList(Str("\"\""))))],Assign(Var("ws"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("prettyprint-Haskell-Exp",Rule(NoAnnoList(Op("Product",[Var("t1__")])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),Var("t1__'")]))])),[WithClause(Assign(Var("t1__'"),App(Seq(CallT(SVar("clean-layout-empty-symbols"),[],[NoAnnoList(Str("\"\"")),NoAnnoList(Op("FALSE",[])),NoAnnoList(Op("FALSE",[]))]),CallNoArgs(SVar("flatten-list"))),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"(\""))])),NoAnnoList(Op("S",[NoAnnoList(Str("\" \""))])),App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-Haskell-Exps2"))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))]))),Var("t1__")),NoAnnoList(Op("S",[NoAnnoList(Str("\" \""))])),NoAnnoList(Op("S",[NoAnnoList(Str("\")\""))]))])))))])),SDefNoArgs("is-Haskell-Exp",Match(NoAnnoList(Op("Product",[Wld])))),RDefNoArgs("Haskell-get-indent",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Product",[Var("t1__")]))),Var("index")])),Var("indent"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("indent"),NoAnnoList(Str("\"\""))))],Assign(Var("indent"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-separator",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Product",[Var("t1__")]))),Var("index")])),Var("separator"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("separator"),NoAnnoList(Str("\"\""))))],Assign(Var("separator"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-leading-ws",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Product",[Var("t1__")]))),Var("index")])),Var("ws"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("ws"),NoAnnoList(Str("\" \""))))],Assign(Var("ws"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("prettyprint-Haskell-Exp",Rule(NoAnnoList(Op("Paren",[Var("t1__")])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),Var("t1__'")]))])),[WithClause(Assign(Var("t1__'"),App(Seq(CallT(SVar("clean-layout-empty-symbols"),[],[NoAnnoList(Str("\"\"")),NoAnnoList(Op("FALSE",[])),NoAnnoList(Op("FALSE",[]))]),CallNoArgs(SVar("flatten-list"))),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"(\""))])),NoAnnoList(Op("S",[NoAnnoList(Str("\" \""))])),App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-Haskell-Exp"))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))]))),Var("t1__")),NoAnnoList(Op("S",[NoAnnoList(Str("\" \""))])),NoAnnoList(Op("S",[NoAnnoList(Str("\")\""))]))])))))])),SDefNoArgs("is-Haskell-Exp",Match(NoAnnoList(Op("Paren",[Wld])))),RDefNoArgs("Haskell-get-indent",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Paren",[Var("t1__")]))),Var("index")])),Var("indent"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("indent"),NoAnnoList(Str("\"\""))))],Assign(Var("indent"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-separator",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Paren",[Var("t1__")]))),Var("index")])),Var("separator"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("separator"),NoAnnoList(Str("\"\""))))],Assign(Var("separator"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-leading-ws",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Paren",[Var("t1__")]))),Var("index")])),Var("ws"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("ws"),NoAnnoList(Str("\" \""))))],Assign(Var("ws"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("prettyprint-Haskell-Exps",Rule(NoAnnoList(Op("ExpList",[Var("t1__")])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),Var("t1__'")]))])),[WithClause(Assign(Var("t1__'"),App(Seq(CallT(SVar("clean-layout-empty-symbols"),[],[NoAnnoList(Str("\"\"")),NoAnnoList(Op("FALSE",[])),NoAnnoList(Op("FALSE",[]))]),CallNoArgs(SVar("flatten-list"))),NoAnnoList(List([App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(CallT(SVar("pp-H-list"),[CallNoArgs(SVar("prettyprint-Haskell-Exp"))],[NoAnnoList(Str("\",\""))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))]))),Var("t1__"))])))))])),SDefNoArgs("is-Haskell-Exps",Match(NoAnnoList(Op("ExpList",[Wld])))),RDefNoArgs("Haskell-get-indent",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("ExpList",[Var("t1__")]))),Var("index")])),Var("indent"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exps\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("indent"),NoAnnoList(Str("\"\""))))],Assign(Var("indent"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-separator",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("ExpList",[Var("t1__")]))),Var("index")])),Var("separator"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exps\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("separator"),NoAnnoList(Str("\",\""))))],Assign(Var("separator"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-leading-ws",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("ExpList",[Var("t1__")]))),Var("index")])),Var("ws"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exps\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("ws"),NoAnnoList(Str("\"\""))))],Assign(Var("ws"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("prettyprint-Haskell-Exps2",Rule(NoAnnoList(Op("Const",[Var("t1__"),Var("t2__")])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),Var("t1__'")]))])),[WithClause(Assign(Var("t1__'"),App(Seq(CallT(SVar("clean-layout-empty-symbols"),[],[NoAnnoList(Str("\"\"")),NoAnnoList(Op("FALSE",[])),NoAnnoList(Op("FALSE",[]))]),CallNoArgs(SVar("flatten-list"))),NoAnnoList(List([App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-Haskell-Exp"))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))]))),Var("t1__")),NoAnnoList(Op("S",[NoAnnoList(Str("\" \""))])),NoAnnoList(Op("S",[NoAnnoList(Str("\",\""))])),NoAnnoList(Op("S",[NoAnnoList(Str("\" \""))])),App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(CallT(SVar("pp-H-list"),[CallNoArgs(SVar("prettyprint-Haskell-Exp"))],[NoAnnoList(Str("\",\""))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))]))),Var("t2__"))])))))])),SDefNoArgs("is-Haskell-Exps2",Match(NoAnnoList(Op("Const",[Wld,Wld])))),RDefNoArgs("Haskell-get-indent",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Const",[Var("t1__"),Var("t2__")]))),Var("index")])),Var("indent"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exps2\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("indent"),NoAnnoList(Str("\"\"")))),SwitchCase(Match(NoAnnoList(Int("2"))),Assign(Var("indent"),NoAnnoList(Str("\"\""))))],Assign(Var("indent"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-separator",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Const",[Var("t1__"),Var("t2__")]))),Var("index")])),Var("separator"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exps2\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("separator"),NoAnnoList(Str("\"\"")))),SwitchCase(Match(NoAnnoList(Int("2"))),Assign(Var("separator"),NoAnnoList(Str("\",\""))))],Assign(Var("separator"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-leading-ws",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Const",[Var("t1__"),Var("t2__")]))),Var("index")])),Var("ws"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exps2\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("ws"),NoAnnoList(Str("\"\"")))),SwitchCase(Match(NoAnnoList(Int("2"))),Assign(Var("ws"),NoAnnoList(Str("\" \""))))],Assign(Var("ws"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("prettyprint-Haskell-Fargs",Rule(NoAnnoList(Op("APatList",[Var("t1__")])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),Var("t1__'")]))])),[WithClause(Assign(Var("t1__'"),App(Seq(CallT(SVar("clean-layout-empty-symbols"),[],[NoAnnoList(Str("\"\"")),NoAnnoList(Op("FALSE",[])),NoAnnoList(Op("FALSE",[]))]),CallNoArgs(SVar("flatten-list"))),NoAnnoList(List([App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(Call(SVar("pp-H-list"),[CallNoArgs(SVar("prettyprint-Haskell-APat"))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))]))),Var("t1__"))])))))])),SDefNoArgs("is-Haskell-Fargs",Match(NoAnnoList(Op("APatList",[Wld])))),RDefNoArgs("Haskell-get-indent",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("APatList",[Var("t1__")]))),Var("index")])),Var("indent"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Fargs\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("indent"),NoAnnoList(Str("\"\""))))],Assign(Var("indent"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-separator",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("APatList",[Var("t1__")]))),Var("index")])),Var("separator"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Fargs\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("separator"),NoAnnoList(Str("\"\""))))],Assign(Var("separator"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-leading-ws",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("APatList",[Var("t1__")]))),Var("index")])),Var("ws"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Fargs\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("ws"),NoAnnoList(Str("\"\""))))],Assign(Var("ws"),NoAnnoList(Str("\"\"")))))])),SDefNoArgs("is-Haskell-AnyExp",Fail),SDefNoArgs("is-Haskell-Exp",Fail),SDefNoArgs("is-Haskell-Exps",Fail),SDefNoArgs("is-Haskell-Exps2",Fail),SDefNoArgs("is-Haskell-Fargs",Fail),RDefNoArgs("prettyprint-Haskell-AnyExp",RuleNoCond(NoAnnoList(Op("amb",[NoAnnoList(ListTail([Var("h")],Var("hs")))])),App(CallNoArgs(SVar("prettyprint-Haskell-AnyExp")),Var("h")))),RDefNoArgs("prettyprint-Haskell-Exp",RuleNoCond(NoAnnoList(Op("amb",[NoAnnoList(ListTail([Var("h")],Var("hs")))])),App(CallNoArgs(SVar("prettyprint-Haskell-Exp")),Var("h")))),RDefNoArgs("prettyprint-Haskell-Exps",RuleNoCond(NoAnnoList(Op("amb",[NoAnnoList(ListTail([Var("h")],Var("hs")))])),App(CallNoArgs(SVar("prettyprint-Haskell-Exps")),Var("h")))),RDefNoArgs("prettyprint-Haskell-Exps2",RuleNoCond(NoAnnoList(Op("amb",[NoAnnoList(ListTail([Var("h")],Var("hs")))])),App(CallNoArgs(SVar("prettyprint-Haskell-Exps2")),Var("h")))),RDefNoArgs("prettyprint-Haskell-Fargs",RuleNoCond(NoAnnoList(Op("amb",[NoAnnoList(ListTail([Var("h")],Var("hs")))])),App(CallNoArgs(SVar("prettyprint-Haskell-Fargs")),Var("h")))),RDefNoArgs("prettyprint-Haskell-AnyExp",RuleNoCond(NoAnnoList(Op("AnyExp-Plhdr",[])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$AnyExp\""))]))]))]))])))),SDefNoArgs("is-Haskell-AnyExp",Match(NoAnnoList(Op("AnyExp-Plhdr",[])))),RDefNoArgs("prettyprint-Haskell-Qvar",RuleNoCond(NoAnnoList(Op("Qvar-Plhdr",[])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Qvar\""))]))]))]))])))),SDefNoArgs("is-Haskell-Qvar",Match(NoAnnoList(Op("Qvar-Plhdr",[])))),RDefNoArgs("prettyprint-Haskell-Gcon",RuleNoCond(NoAnnoList(Op("Gcon-Plhdr",[])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Gcon\""))]))]))]))])))),SDefNoArgs("is-Haskell-Gcon",Match(NoAnnoList(Op("Gcon-Plhdr",[])))),RDefNoArgs("prettyprint-Haskell-Literal",RuleNoCond(NoAnnoList(Op("Literal-Plhdr",[])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Literal\""))]))]))]))])))),SDefNoArgs("is-Haskell-Literal",Match(NoAnnoList(Op("Literal-Plhdr",[])))),RDefNoArgs("prettyprint-Haskell-Exps",RuleNoCond(NoAnnoList(Op("Exps-Plhdr",[])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Exps\""))]))]))]))])))),SDefNoArgs("is-Haskell-Exps",Match(NoAnnoList(Op("Exps-Plhdr",[])))),RDefNoArgs("prettyprint-Haskell-Exps2",RuleNoCond(NoAnnoList(Op("Exps2-Plhdr",[])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Exps2\""))]))]))]))])))),SDefNoArgs("is-Haskell-Exps2",Match(NoAnnoList(Op("Exps2-Plhdr",[])))),RDefNoArgs("prettyprint-Haskell-Exp",RuleNoCond(NoAnnoList(Op("Exp-Plhdr",[])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Exp\""))]))]))]))])))),SDefNoArgs("is-Haskell-Exp",Match(NoAnnoList(Op("Exp-Plhdr",[])))),RDefNoArgs("prettyprint-Haskell-Fargs",RuleNoCond(NoAnnoList(Op("Fargs-Plhdr",[])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Fargs\""))]))]))]))])))),SDefNoArgs("is-Haskell-Fargs",Match(NoAnnoList(Op("Fargs-Plhdr",[])))),RDefNoArgs("prettyprint-Haskell-APat",RuleNoCond(NoAnnoList(Op("APat-Plhdr",[])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$APat\""))]))]))]))])))),SDefNoArgs("is-Haskell-APat",Match(NoAnnoList(Op("APat-Plhdr",[])))),RDefNoArgs("prettyprint-Haskell-AnyExp",RuleNoCond(NoAnnoList(Op("AnyExp-Plhdr",[Wld])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$AnyExp\""))]))]))]))])))),SDefNoArgs("is-Haskell-AnyExp",Match(NoAnnoList(Op("AnyExp-Plhdr",[Wld])))),RDefNoArgs("prettyprint-Haskell-Qvar",RuleNoCond(NoAnnoList(Op("Qvar-Plhdr",[Wld])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Qvar\""))]))]))]))])))),SDefNoArgs("is-Haskell-Qvar",Match(NoAnnoList(Op("Qvar-Plhdr",[Wld])))),RDefNoArgs("prettyprint-Haskell-Gcon",RuleNoCond(NoAnnoList(Op("Gcon-Plhdr",[Wld])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Gcon\""))]))]))]))])))),SDefNoArgs("is-Haskell-Gcon",Match(NoAnnoList(Op("Gcon-Plhdr",[Wld])))),RDefNoArgs("prettyprint-Haskell-Literal",RuleNoCond(NoAnnoList(Op("Literal-Plhdr",[Wld])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Literal\""))]))]))]))])))),SDefNoArgs("is-Haskell-Literal",Match(NoAnnoList(Op("Literal-Plhdr",[Wld])))),RDefNoArgs("prettyprint-Haskell-Exps",RuleNoCond(NoAnnoList(Op("Exps-Plhdr",[Wld])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Exps\""))]))]))]))])))),SDefNoArgs("is-Haskell-Exps",Match(NoAnnoList(Op("Exps-Plhdr",[Wld])))),RDefNoArgs("prettyprint-Haskell-Exps2",RuleNoCond(NoAnnoList(Op("Exps2-Plhdr",[Wld])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Exps2\""))]))]))]))])))),SDefNoArgs("is-Haskell-Exps2",Match(NoAnnoList(Op("Exps2-Plhdr",[Wld])))),RDefNoArgs("prettyprint-Haskell-Exp",RuleNoCond(NoAnnoList(Op("Exp-Plhdr",[Wld])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Exp\""))]))]))]))])))),SDefNoArgs("is-Haskell-Exp",Match(NoAnnoList(Op("Exp-Plhdr",[Wld])))),RDefNoArgs("prettyprint-Haskell-Fargs",RuleNoCond(NoAnnoList(Op("Fargs-Plhdr",[Wld])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Fargs\""))]))]))]))])))),SDefNoArgs("is-Haskell-Fargs",Match(NoAnnoList(Op("Fargs-Plhdr",[Wld])))),RDefNoArgs("prettyprint-Haskell-APat",RuleNoCond(NoAnnoList(Op("APat-Plhdr",[Wld])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$APat\""))]))]))]))])))),SDefNoArgs("is-Haskell-APat",Match(NoAnnoList(Op("APat-Plhdr",[Wld]))))]),Strategies([SDefNoArgs("prettyprint-Haskell",CallNoArgs(SVar("prettyprint-Haskell-Infix"))),SDefNoArgs("prettyprint-Haskell",CallNoArgs(SVar("prettyprint-Haskell-Prec"))),SDefNoArgs("prettyprint-Haskell",CallNoArgs(SVar("prettyprint-Haskell-Ops"))),SDefNoArgs("prettyprint-Haskell",CallNoArgs(SVar("prettyprint-Haskell-Fixdecl"))),SDefNoArgs("prettyprint-Haskell",CallNoArgs(SVar("prettyprint-Haskell-Decl"))),SDefNoArgs("prettyprint-Haskell",CallNoArgs(SVar("prettyprint-Haskell-Exp"))),SDefNoArgs("prettyprint-Haskell",CallNoArgs(SVar("prettyprint-Haskell-QopNoNeg"))),SDefNoArgs("prettyprint-Haskell",CallNoArgs(SVar("prettyprint-Haskell-LabelBinds"))),RDefT("prettyprint-Haskell",[],[DefaultVarDec("sort")],Rule(Var("t"),RootApp(CallNoArgs(SVar("prettyprint-Haskell-Infix"))),BA(Match(NoAnnoList(Str("\"Infix\""))),Var("sort")))),RDefT("prettyprint-Haskell",[],[DefaultVarDec("sort")],Rule(Var("t"),RootApp(CallNoArgs(SVar("prettyprint-Haskell-Prec"))),BA(Match(NoAnnoList(Str("\"Prec\""))),Var("sort")))),RDefT("prettyprint-Haskell",[],[DefaultVarDec("sort")],Rule(Var("t"),RootApp(CallNoArgs(SVar("prettyprint-Haskell-Ops"))),BA(Match(NoAnnoList(Str("\"Ops\""))),Var("sort")))),RDefT("prettyprint-Haskell",[],[DefaultVarDec("sort")],Rule(Var("t"),RootApp(CallNoArgs(SVar("prettyprint-Haskell-Fixdecl"))),BA(Match(NoAnnoList(Str("\"Fixdecl\""))),Var("sort")))),RDefT("prettyprint-Haskell",[],[DefaultVarDec("sort")],Rule(Var("t"),RootApp(CallNoArgs(SVar("prettyprint-Haskell-Decl"))),BA(Match(NoAnnoList(Str("\"Decl\""))),Var("sort")))),RDefT("prettyprint-Haskell",[],[DefaultVarDec("sort")],Rule(Var("t"),RootApp(CallNoArgs(SVar("prettyprint-Haskell-Exp"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),RDefT("prettyprint-Haskell",[],[DefaultVarDec("sort")],Rule(Var("t"),RootApp(CallNoArgs(SVar("prettyprint-Haskell-QopNoNeg"))),BA(Match(NoAnnoList(Str("\"QopNoNeg\""))),Var("sort")))),RDefT("prettyprint-Haskell",[],[DefaultVarDec("sort")],Rule(Var("t"),RootApp(CallNoArgs(SVar("prettyprint-Haskell-LabelBinds"))),BA(Match(NoAnnoList(Str("\"LabelBinds\""))),Var("sort")))),RDefNoArgs("prettyprint-Haskell-Infix",Rule(NoAnnoList(Op("Infix",[])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),Var("t1__'")]))])),[WithClause(Assign(Var("t1__'"),App(Seq(CallT(SVar("clean-layout-empty-symbols"),[],[NoAnnoList(Str("\"\"")),NoAnnoList(Op("FALSE",[])),NoAnnoList(Op("FALSE",[]))]),CallNoArgs(SVar("flatten-list"))),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"infix\""))]))])))))])),SDefNoArgs("is-Haskell-Infix",Match(NoAnnoList(Op("Infix",[])))),RDefNoArgs("Haskell-get-indent",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Infix",[]))),Var("index")])),Var("indent"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Infix\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[],Assign(Var("indent"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-separator",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Infix",[]))),Var("index")])),Var("separator"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Infix\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[],Assign(Var("separator"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-leading-ws",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Infix",[]))),Var("index")])),Var("ws"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Infix\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[],Assign(Var("ws"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("prettyprint-Haskell-Infix",Rule(NoAnnoList(Op("InfixL",[])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),Var("t1__'")]))])),[WithClause(Assign(Var("t1__'"),App(Seq(CallT(SVar("clean-layout-empty-symbols"),[],[NoAnnoList(Str("\"\"")),NoAnnoList(Op("FALSE",[])),NoAnnoList(Op("FALSE",[]))]),CallNoArgs(SVar("flatten-list"))),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"infixl\""))]))])))))])),SDefNoArgs("is-Haskell-Infix",Match(NoAnnoList(Op("InfixL",[])))),RDefNoArgs("Haskell-get-indent",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("InfixL",[]))),Var("index")])),Var("indent"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Infix\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[],Assign(Var("indent"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-separator",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("InfixL",[]))),Var("index")])),Var("separator"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Infix\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[],Assign(Var("separator"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-leading-ws",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("InfixL",[]))),Var("index")])),Var("ws"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Infix\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[],Assign(Var("ws"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("prettyprint-Haskell-Infix",Rule(NoAnnoList(Op("InfixR",[])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),Var("t1__'")]))])),[WithClause(Assign(Var("t1__'"),App(Seq(CallT(SVar("clean-layout-empty-symbols"),[],[NoAnnoList(Str("\"\"")),NoAnnoList(Op("FALSE",[])),NoAnnoList(Op("FALSE",[]))]),CallNoArgs(SVar("flatten-list"))),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"infixr\""))]))])))))])),SDefNoArgs("is-Haskell-Infix",Match(NoAnnoList(Op("InfixR",[])))),RDefNoArgs("Haskell-get-indent",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("InfixR",[]))),Var("index")])),Var("indent"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Infix\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[],Assign(Var("indent"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-separator",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("InfixR",[]))),Var("index")])),Var("separator"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Infix\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[],Assign(Var("separator"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-leading-ws",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("InfixR",[]))),Var("index")])),Var("ws"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Infix\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[],Assign(Var("ws"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("prettyprint-Haskell-Prec",Rule(NoAnnoList(Op("Integer",[Var("t1__")])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),Var("t1__'")]))])),[WithClause(Assign(Var("t1__'"),App(Seq(CallT(SVar("clean-layout-empty-symbols"),[],[NoAnnoList(Str("\"\"")),NoAnnoList(Op("FALSE",[])),NoAnnoList(Op("FALSE",[]))]),CallNoArgs(SVar("flatten-list"))),NoAnnoList(List([App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),Call(SVar("pp-option"),[LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-Haskell-INTEGER"))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))])))])),Var("t1__"))])))))])),SDefNoArgs("is-Haskell-Prec",Match(NoAnnoList(Op("Integer",[Wld])))),RDefNoArgs("Haskell-get-indent",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Integer",[Var("t1__")]))),Var("index")])),Var("indent"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Prec\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("indent"),NoAnnoList(Str("\"\""))))],Assign(Var("indent"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-separator",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Integer",[Var("t1__")]))),Var("index")])),Var("separator"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Prec\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("separator"),NoAnnoList(Str("\"\""))))],Assign(Var("separator"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-leading-ws",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Integer",[Var("t1__")]))),Var("index")])),Var("ws"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Prec\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("ws"),NoAnnoList(Str("\"\""))))],Assign(Var("ws"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("prettyprint-Haskell-Ops",Rule(NoAnnoList(Op("OpsList",[Var("t1__")])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),Var("t1__'")]))])),[WithClause(Assign(Var("t1__'"),App(Seq(CallT(SVar("clean-layout-empty-symbols"),[],[NoAnnoList(Str("\"\"")),NoAnnoList(Op("FALSE",[])),NoAnnoList(Op("FALSE",[]))]),CallNoArgs(SVar("flatten-list"))),NoAnnoList(List([App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(CallT(SVar("pp-H-list"),[CallNoArgs(SVar("prettyprint-Haskell-Op"))],[NoAnnoList(Str("\",\""))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))]))),Var("t1__"))])))))])),SDefNoArgs("is-Haskell-Ops",Match(NoAnnoList(Op("OpsList",[Wld])))),RDefNoArgs("Haskell-get-indent",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("OpsList",[Var("t1__")]))),Var("index")])),Var("indent"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Ops\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("indent"),NoAnnoList(Str("\"\""))))],Assign(Var("indent"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-separator",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("OpsList",[Var("t1__")]))),Var("index")])),Var("separator"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Ops\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("separator"),NoAnnoList(Str("\",\""))))],Assign(Var("separator"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-leading-ws",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("OpsList",[Var("t1__")]))),Var("index")])),Var("ws"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Ops\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("ws"),NoAnnoList(Str("\"\""))))],Assign(Var("ws"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("prettyprint-Haskell-Fixdecl",Rule(NoAnnoList(Op("FixDecl",[Var("t1__"),Var("t2__"),Var("t3__")])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),Var("t1__'")]))])),[WithClause(Assign(Var("t1__'"),App(Seq(CallT(SVar("clean-layout-empty-symbols"),[],[NoAnnoList(Str("\"\"")),NoAnnoList(Op("FALSE",[])),NoAnnoList(Op("FALSE",[]))]),CallNoArgs(SVar("flatten-list"))),NoAnnoList(List([App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-Haskell-Infix"))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))]))),Var("t1__")),NoAnnoList(Op("S",[NoAnnoList(Str("\" \""))])),App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-Haskell-Prec"))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))]))),Var("t2__")),NoAnnoList(Op("S",[NoAnnoList(Str("\" \""))])),App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-Haskell-Ops"))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))]))),Var("t3__"))])))))])),SDefNoArgs("is-Haskell-Fixdecl",Match(NoAnnoList(Op("FixDecl",[Wld,Wld,Wld])))),RDefNoArgs("Haskell-get-indent",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("FixDecl",[Var("t1__"),Var("t2__"),Var("t3__")]))),Var("index")])),Var("indent"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Fixdecl\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("indent"),NoAnnoList(Str("\"\"")))),SwitchCase(Match(NoAnnoList(Int("2"))),Assign(Var("indent"),NoAnnoList(Str("\"\"")))),SwitchCase(Match(NoAnnoList(Int("3"))),Assign(Var("indent"),NoAnnoList(Str("\"\""))))],Assign(Var("indent"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-separator",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("FixDecl",[Var("t1__"),Var("t2__"),Var("t3__")]))),Var("index")])),Var("separator"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Fixdecl\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("separator"),NoAnnoList(Str("\"\"")))),SwitchCase(Match(NoAnnoList(Int("2"))),Assign(Var("separator"),NoAnnoList(Str("\"\"")))),SwitchCase(Match(NoAnnoList(Int("3"))),Assign(Var("separator"),NoAnnoList(Str("\"\""))))],Assign(Var("separator"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-leading-ws",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("FixDecl",[Var("t1__"),Var("t2__"),Var("t3__")]))),Var("index")])),Var("ws"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Fixdecl\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("ws"),NoAnnoList(Str("\"\"")))),SwitchCase(Match(NoAnnoList(Int("2"))),Assign(Var("ws"),NoAnnoList(Str("\" \"")))),SwitchCase(Match(NoAnnoList(Int("3"))),Assign(Var("ws"),NoAnnoList(Str("\" \""))))],Assign(Var("ws"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("prettyprint-Haskell-Decl",Rule(Var("t1__"),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),Var("t1__'")]))])),[WhereClause(Not(CallNoArgs(SVar("is-Haskell-Decl")))),WhereClause(Assign(Var("t1__'"),App(Seq(CallT(SVar("clean-layout-empty-symbols"),[],[NoAnnoList(Str("\"\"")),NoAnnoList(Op("FALSE",[])),NoAnnoList(Op("FALSE",[]))]),CallNoArgs(SVar("flatten-list"))),NoAnnoList(List([App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-Haskell-Fixdecl"))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))]))),Var("t1__"))])))))])),RDefNoArgs("prettyprint-Haskell-Exp",Rule(NoAnnoList(Op("LSection",[Var("t1__"),Var("t2__")])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),Var("t1__'")]))])),[WithClause(Assign(Var("t1__'"),App(Seq(CallT(SVar("clean-layout-empty-symbols"),[],[NoAnnoList(Str("\"\"")),NoAnnoList(Op("FALSE",[])),NoAnnoList(Op("FALSE",[]))]),CallNoArgs(SVar("flatten-list"))),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"(\""))])),NoAnnoList(Op("S",[NoAnnoList(Str("\" \""))])),App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-Haskell-Exp"))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))]))),Var("t1__")),NoAnnoList(Op("S",[NoAnnoList(Str("\" \""))])),App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-Haskell-Qop"))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))]))),Var("t2__")),NoAnnoList(Op("S",[NoAnnoList(Str("\" \""))])),NoAnnoList(Op("S",[NoAnnoList(Str("\")\""))]))])))))])),SDefNoArgs("is-Haskell-Exp",Match(NoAnnoList(Op("LSection",[Wld,Wld])))),RDefNoArgs("Haskell-get-indent",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("LSection",[Var("t1__"),Var("t2__")]))),Var("index")])),Var("indent"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("indent"),NoAnnoList(Str("\"\"")))),SwitchCase(Match(NoAnnoList(Int("2"))),Assign(Var("indent"),NoAnnoList(Str("\"\""))))],Assign(Var("indent"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-separator",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("LSection",[Var("t1__"),Var("t2__")]))),Var("index")])),Var("separator"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("separator"),NoAnnoList(Str("\"\"")))),SwitchCase(Match(NoAnnoList(Int("2"))),Assign(Var("separator"),NoAnnoList(Str("\"\""))))],Assign(Var("separator"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-leading-ws",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("LSection",[Var("t1__"),Var("t2__")]))),Var("index")])),Var("ws"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("ws"),NoAnnoList(Str("\" \"")))),SwitchCase(Match(NoAnnoList(Int("2"))),Assign(Var("ws"),NoAnnoList(Str("\" \""))))],Assign(Var("ws"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("prettyprint-Haskell-Exp",Rule(NoAnnoList(Op("RSection",[Var("t1__"),Var("t2__")])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),Var("t1__'")]))])),[WithClause(Assign(Var("t1__'"),App(Seq(CallT(SVar("clean-layout-empty-symbols"),[],[NoAnnoList(Str("\"\"")),NoAnnoList(Op("FALSE",[])),NoAnnoList(Op("FALSE",[]))]),CallNoArgs(SVar("flatten-list"))),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"(\""))])),NoAnnoList(Op("S",[NoAnnoList(Str("\" \""))])),App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-Haskell-QopNoNeg"))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))]))),Var("t1__")),NoAnnoList(Op("S",[NoAnnoList(Str("\" \""))])),App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-Haskell-Exp"))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))]))),Var("t2__")),NoAnnoList(Op("S",[NoAnnoList(Str("\" \""))])),NoAnnoList(Op("S",[NoAnnoList(Str("\")\""))]))])))))])),SDefNoArgs("is-Haskell-Exp",Match(NoAnnoList(Op("RSection",[Wld,Wld])))),RDefNoArgs("Haskell-get-indent",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("RSection",[Var("t1__"),Var("t2__")]))),Var("index")])),Var("indent"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("indent"),NoAnnoList(Str("\"\"")))),SwitchCase(Match(NoAnnoList(Int("2"))),Assign(Var("indent"),NoAnnoList(Str("\"\""))))],Assign(Var("indent"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-separator",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("RSection",[Var("t1__"),Var("t2__")]))),Var("index")])),Var("separator"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("separator"),NoAnnoList(Str("\"\"")))),SwitchCase(Match(NoAnnoList(Int("2"))),Assign(Var("separator"),NoAnnoList(Str("\"\""))))],Assign(Var("separator"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-leading-ws",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("RSection",[Var("t1__"),Var("t2__")]))),Var("index")])),Var("ws"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("ws"),NoAnnoList(Str("\" \"")))),SwitchCase(Match(NoAnnoList(Int("2"))),Assign(Var("ws"),NoAnnoList(Str("\" \""))))],Assign(Var("ws"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("prettyprint-Haskell-QopNoNeg",Rule(Var("t1__"),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),Var("t1__'")]))])),[WhereClause(Not(CallNoArgs(SVar("is-Haskell-QopNoNeg")))),WhereClause(Assign(Var("t1__'"),App(Seq(CallT(SVar("clean-layout-empty-symbols"),[],[NoAnnoList(Str("\"\"")),NoAnnoList(Op("FALSE",[])),NoAnnoList(Op("FALSE",[]))]),CallNoArgs(SVar("flatten-list"))),NoAnnoList(List([App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-Haskell-Qop"))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))]))),Var("t1__"))])))))])),RDefNoArgs("prettyprint-Haskell-LabelBinds",Rule(NoAnnoList(Op("LabelBinds",[Var("t1__")])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),Var("t1__'")]))])),[WithClause(Assign(Var("t1__'"),App(Seq(CallT(SVar("clean-layout-empty-symbols"),[],[NoAnnoList(Str("\"\"")),NoAnnoList(Op("FALSE",[])),NoAnnoList(Op("FALSE",[]))]),CallNoArgs(SVar("flatten-list"))),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"{\""))])),NoAnnoList(Op("S",[NoAnnoList(Str("\" \""))])),App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(CallT(SVar("pp-H-list"),[CallNoArgs(SVar("prettyprint-Haskell-Fbind"))],[NoAnnoList(Str("\",\""))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))]))),Var("t1__")),NoAnnoList(Op("S",[NoAnnoList(Str("\" \""))])),NoAnnoList(Op("S",[NoAnnoList(Str("\"}\""))]))])))))])),SDefNoArgs("is-Haskell-LabelBinds",Match(NoAnnoList(Op("LabelBinds",[Wld])))),RDefNoArgs("Haskell-get-indent",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("LabelBinds",[Var("t1__")]))),Var("index")])),Var("indent"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"LabelBinds\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("indent"),NoAnnoList(Str("\"\""))))],Assign(Var("indent"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-separator",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("LabelBinds",[Var("t1__")]))),Var("index")])),Var("separator"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"LabelBinds\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("separator"),NoAnnoList(Str("\",\""))))],Assign(Var("separator"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-leading-ws",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("LabelBinds",[Var("t1__")]))),Var("index")])),Var("ws"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"LabelBinds\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("ws"),NoAnnoList(Str("\" \""))))],Assign(Var("ws"),NoAnnoList(Str("\"\"")))))])),SDefNoArgs("is-Haskell-Infix",Fail),SDefNoArgs("is-Haskell-Prec",Fail),SDefNoArgs("is-Haskell-Ops",Fail),SDefNoArgs("is-Haskell-Fixdecl",Fail),SDefNoArgs("is-Haskell-Decl",Fail),SDefNoArgs("is-Haskell-Exp",Fail),SDefNoArgs("is-Haskell-QopNoNeg",Fail),SDefNoArgs("is-Haskell-LabelBinds",Fail),RDefNoArgs("prettyprint-Haskell-Infix",RuleNoCond(NoAnnoList(Op("amb",[NoAnnoList(ListTail([Var("h")],Var("hs")))])),App(CallNoArgs(SVar("prettyprint-Haskell-Infix")),Var("h")))),RDefNoArgs("prettyprint-Haskell-Prec",RuleNoCond(NoAnnoList(Op("amb",[NoAnnoList(ListTail([Var("h")],Var("hs")))])),App(CallNoArgs(SVar("prettyprint-Haskell-Prec")),Var("h")))),RDefNoArgs("prettyprint-Haskell-Ops",RuleNoCond(NoAnnoList(Op("amb",[NoAnnoList(ListTail([Var("h")],Var("hs")))])),App(CallNoArgs(SVar("prettyprint-Haskell-Ops")),Var("h")))),RDefNoArgs("prettyprint-Haskell-Fixdecl",RuleNoCond(NoAnnoList(Op("amb",[NoAnnoList(ListTail([Var("h")],Var("hs")))])),App(CallNoArgs(SVar("prettyprint-Haskell-Fixdecl")),Var("h")))),RDefNoArgs("prettyprint-Haskell-Decl",RuleNoCond(NoAnnoList(Op("amb",[NoAnnoList(ListTail([Var("h")],Var("hs")))])),App(CallNoArgs(SVar("prettyprint-Haskell-Decl")),Var("h")))),RDefNoArgs("prettyprint-Haskell-Exp",RuleNoCond(NoAnnoList(Op("amb",[NoAnnoList(ListTail([Var("h")],Var("hs")))])),App(CallNoArgs(SVar("prettyprint-Haskell-Exp")),Var("h")))),RDefNoArgs("prettyprint-Haskell-QopNoNeg",RuleNoCond(NoAnnoList(Op("amb",[NoAnnoList(ListTail([Var("h")],Var("hs")))])),App(CallNoArgs(SVar("prettyprint-Haskell-QopNoNeg")),Var("h")))),RDefNoArgs("prettyprint-Haskell-LabelBinds",RuleNoCond(NoAnnoList(Op("amb",[NoAnnoList(ListTail([Var("h")],Var("hs")))])),App(CallNoArgs(SVar("prettyprint-Haskell-LabelBinds")),Var("h")))),RDefNoArgs("prettyprint-Haskell-INTEGER",RuleNoCond(NoAnnoList(Op("INTEGER-Plhdr",[])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$INTEGER\""))]))]))]))])))),SDefNoArgs("is-Haskell-INTEGER",Match(NoAnnoList(Op("INTEGER-Plhdr",[])))),RDefNoArgs("prettyprint-Haskell-Op",RuleNoCond(NoAnnoList(Op("Op-Plhdr",[])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Op\""))]))]))]))])))),SDefNoArgs("is-Haskell-Op",Match(NoAnnoList(Op("Op-Plhdr",[])))),RDefNoArgs("prettyprint-Haskell-Infix",RuleNoCond(NoAnnoList(Op("Infix-Plhdr",[])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Infix\""))]))]))]))])))),SDefNoArgs("is-Haskell-Infix",Match(NoAnnoList(Op("Infix-Plhdr",[])))),RDefNoArgs("prettyprint-Haskell-Prec",RuleNoCond(NoAnnoList(Op("Prec-Plhdr",[])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Prec\""))]))]))]))])))),SDefNoArgs("is-Haskell-Prec",Match(NoAnnoList(Op("Prec-Plhdr",[])))),RDefNoArgs("prettyprint-Haskell-Ops",RuleNoCond(NoAnnoList(Op("Ops-Plhdr",[])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Ops\""))]))]))]))])))),SDefNoArgs("is-Haskell-Ops",Match(NoAnnoList(Op("Ops-Plhdr",[])))),RDefNoArgs("prettyprint-Haskell-Decl",RuleNoCond(NoAnnoList(Op("Decl-Plhdr",[])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Decl\""))]))]))]))])))),SDefNoArgs("is-Haskell-Decl",Match(NoAnnoList(Op("Decl-Plhdr",[])))),RDefNoArgs("prettyprint-Haskell-Fixdecl",RuleNoCond(NoAnnoList(Op("Fixdecl-Plhdr",[])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Fixdecl\""))]))]))]))])))),SDefNoArgs("is-Haskell-Fixdecl",Match(NoAnnoList(Op("Fixdecl-Plhdr",[])))),RDefNoArgs("prettyprint-Haskell-Exp",RuleNoCond(NoAnnoList(Op("Exp-Plhdr",[])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Exp\""))]))]))]))])))),SDefNoArgs("is-Haskell-Exp",Match(NoAnnoList(Op("Exp-Plhdr",[])))),RDefNoArgs("prettyprint-Haskell-Qop",RuleNoCond(NoAnnoList(Op("Qop-Plhdr",[])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Qop\""))]))]))]))])))),SDefNoArgs("is-Haskell-Qop",Match(NoAnnoList(Op("Qop-Plhdr",[])))),RDefNoArgs("prettyprint-Haskell-QopNoNeg",RuleNoCond(NoAnnoList(Op("QopNoNeg-Plhdr",[])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$QopNoNeg\""))]))]))]))])))),SDefNoArgs("is-Haskell-QopNoNeg",Match(NoAnnoList(Op("QopNoNeg-Plhdr",[])))),RDefNoArgs("prettyprint-Haskell-LabelBinds",RuleNoCond(NoAnnoList(Op("LabelBinds-Plhdr",[])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$LabelBinds\""))]))]))]))])))),SDefNoArgs("is-Haskell-LabelBinds",Match(NoAnnoList(Op("LabelBinds-Plhdr",[])))),RDefNoArgs("prettyprint-Haskell-Fbind",RuleNoCond(NoAnnoList(Op("Fbind-Plhdr",[])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Fbind\""))]))]))]))])))),SDefNoArgs("is-Haskell-Fbind",Match(NoAnnoList(Op("Fbind-Plhdr",[])))),RDefNoArgs("prettyprint-Haskell-INTEGER",RuleNoCond(NoAnnoList(Op("INTEGER-Plhdr",[Wld])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$INTEGER\""))]))]))]))])))),SDefNoArgs("is-Haskell-INTEGER",Match(NoAnnoList(Op("INTEGER-Plhdr",[Wld])))),RDefNoArgs("prettyprint-Haskell-Op",RuleNoCond(NoAnnoList(Op("Op-Plhdr",[Wld])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Op\""))]))]))]))])))),SDefNoArgs("is-Haskell-Op",Match(NoAnnoList(Op("Op-Plhdr",[Wld])))),RDefNoArgs("prettyprint-Haskell-Infix",RuleNoCond(NoAnnoList(Op("Infix-Plhdr",[Wld])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Infix\""))]))]))]))])))),SDefNoArgs("is-Haskell-Infix",Match(NoAnnoList(Op("Infix-Plhdr",[Wld])))),RDefNoArgs("prettyprint-Haskell-Prec",RuleNoCond(NoAnnoList(Op("Prec-Plhdr",[Wld])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Prec\""))]))]))]))])))),SDefNoArgs("is-Haskell-Prec",Match(NoAnnoList(Op("Prec-Plhdr",[Wld])))),RDefNoArgs("prettyprint-Haskell-Ops",RuleNoCond(NoAnnoList(Op("Ops-Plhdr",[Wld])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Ops\""))]))]))]))])))),SDefNoArgs("is-Haskell-Ops",Match(NoAnnoList(Op("Ops-Plhdr",[Wld])))),RDefNoArgs("prettyprint-Haskell-Decl",RuleNoCond(NoAnnoList(Op("Decl-Plhdr",[Wld])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Decl\""))]))]))]))])))),SDefNoArgs("is-Haskell-Decl",Match(NoAnnoList(Op("Decl-Plhdr",[Wld])))),RDefNoArgs("prettyprint-Haskell-Fixdecl",RuleNoCond(NoAnnoList(Op("Fixdecl-Plhdr",[Wld])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Fixdecl\""))]))]))]))])))),SDefNoArgs("is-Haskell-Fixdecl",Match(NoAnnoList(Op("Fixdecl-Plhdr",[Wld])))),RDefNoArgs("prettyprint-Haskell-Exp",RuleNoCond(NoAnnoList(Op("Exp-Plhdr",[Wld])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Exp\""))]))]))]))])))),SDefNoArgs("is-Haskell-Exp",Match(NoAnnoList(Op("Exp-Plhdr",[Wld])))),RDefNoArgs("prettyprint-Haskell-Qop",RuleNoCond(NoAnnoList(Op("Qop-Plhdr",[Wld])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Qop\""))]))]))]))])))),SDefNoArgs("is-Haskell-Qop",Match(NoAnnoList(Op("Qop-Plhdr",[Wld])))),RDefNoArgs("prettyprint-Haskell-QopNoNeg",RuleNoCond(NoAnnoList(Op("QopNoNeg-Plhdr",[Wld])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$QopNoNeg\""))]))]))]))])))),SDefNoArgs("is-Haskell-QopNoNeg",Match(NoAnnoList(Op("QopNoNeg-Plhdr",[Wld])))),RDefNoArgs("prettyprint-Haskell-LabelBinds",RuleNoCond(NoAnnoList(Op("LabelBinds-Plhdr",[Wld])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$LabelBinds\""))]))]))]))])))),SDefNoArgs("is-Haskell-LabelBinds",Match(NoAnnoList(Op("LabelBinds-Plhdr",[Wld])))),RDefNoArgs("prettyprint-Haskell-Fbind",RuleNoCond(NoAnnoList(Op("Fbind-Plhdr",[Wld])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Fbind\""))]))]))]))])))),SDefNoArgs("is-Haskell-Fbind",Match(NoAnnoList(Op("Fbind-Plhdr",[Wld])))),RDefNoArgs("prettyprint-Haskell-INTEGER",RuleNoCond(NoAnnoList(Op("INTEGER-Opt-Plhdr",[])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"\""))]))]))]))])))),SDefNoArgs("is-Haskell-INTEGER",Match(NoAnnoList(Op("INTEGER-Opt-Plhdr",[])))),RDefNoArgs("prettyprint-Haskell-Fbind",RuleNoCond(NoAnnoList(Op("Fbind-Opt-Plhdr",[])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"\""))]))]))]))])))),SDefNoArgs("is-Haskell-Fbind",Match(NoAnnoList(Op("Fbind-Opt-Plhdr",[]))))]),Strategies([SDefNoArgs("prettyprint-Haskell",CallNoArgs(SVar("prettyprint-Haskell-Exp"))),RDefT("prettyprint-Haskell",[],[DefaultVarDec("sort")],Rule(Var("t"),RootApp(CallNoArgs(SVar("prettyprint-Haskell-Exp"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),RDefNoArgs("prettyprint-Haskell-Exp",Rule(NoAnnoList(Op("Named",[Var("t1__"),Var("t2__")])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),Var("t1__'")]))])),[WithClause(Assign(Var("t1__'"),App(Seq(CallT(SVar("clean-layout-empty-symbols"),[],[NoAnnoList(Str("\"\"")),NoAnnoList(Op("FALSE",[])),NoAnnoList(Op("FALSE",[]))]),CallNoArgs(SVar("flatten-list"))),NoAnnoList(List([App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-Haskell-Qvar"))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))]))),Var("t1__")),NoAnnoList(Op("S",[NoAnnoList(Str("\" \""))])),NoAnnoList(Op("S",[NoAnnoList(Str("\"@\""))])),NoAnnoList(Op("S",[NoAnnoList(Str("\" \""))])),App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-Haskell-Exp"))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))]))),Var("t2__"))])))))])),SDefNoArgs("is-Haskell-Exp",Match(NoAnnoList(Op("Named",[Wld,Wld])))),RDefNoArgs("Haskell-get-indent",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Named",[Var("t1__"),Var("t2__")]))),Var("index")])),Var("indent"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("indent"),NoAnnoList(Str("\"\"")))),SwitchCase(Match(NoAnnoList(Int("2"))),Assign(Var("indent"),NoAnnoList(Str("\"\""))))],Assign(Var("indent"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-separator",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Named",[Var("t1__"),Var("t2__")]))),Var("index")])),Var("separator"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("separator"),NoAnnoList(Str("\"\"")))),SwitchCase(Match(NoAnnoList(Int("2"))),Assign(Var("separator"),NoAnnoList(Str("\"\""))))],Assign(Var("separator"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-leading-ws",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Named",[Var("t1__"),Var("t2__")]))),Var("index")])),Var("ws"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("ws"),NoAnnoList(Str("\"\"")))),SwitchCase(Match(NoAnnoList(Int("2"))),Assign(Var("ws"),NoAnnoList(Str("\" \""))))],Assign(Var("ws"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("prettyprint-Haskell-Exp",Rule(NoAnnoList(Op("Labeled",[Var("t1__"),Var("t2__")])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),Var("t1__'")]))])),[WithClause(Assign(Var("t1__'"),App(Seq(CallT(SVar("clean-layout-empty-symbols"),[],[NoAnnoList(Str("\"\"")),NoAnnoList(Op("FALSE",[])),NoAnnoList(Op("FALSE",[]))]),CallNoArgs(SVar("flatten-list"))),NoAnnoList(List([App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-Haskell-Exp"))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))]))),Var("t1__")),NoAnnoList(Op("S",[NoAnnoList(Str("\" \""))])),App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-Haskell-LabelBinds"))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))]))),Var("t2__"))])))))])),SDefNoArgs("is-Haskell-Exp",Match(NoAnnoList(Op("Labeled",[Wld,Wld])))),RDefNoArgs("Haskell-get-indent",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Labeled",[Var("t1__"),Var("t2__")]))),Var("index")])),Var("indent"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("indent"),NoAnnoList(Str("\"\"")))),SwitchCase(Match(NoAnnoList(Int("2"))),Assign(Var("indent"),NoAnnoList(Str("\"\""))))],Assign(Var("indent"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-separator",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Labeled",[Var("t1__"),Var("t2__")]))),Var("index")])),Var("separator"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("separator"),NoAnnoList(Str("\"\"")))),SwitchCase(Match(NoAnnoList(Int("2"))),Assign(Var("separator"),NoAnnoList(Str("\"\""))))],Assign(Var("separator"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-leading-ws",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Labeled",[Var("t1__"),Var("t2__")]))),Var("index")])),Var("ws"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("ws"),NoAnnoList(Str("\"\"")))),SwitchCase(Match(NoAnnoList(Int("2"))),Assign(Var("ws"),NoAnnoList(Str("\" \""))))],Assign(Var("ws"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("prettyprint-Haskell-Exp",Rule(NoAnnoList(Op("AppBin",[Var("t1__"),Var("t2__")])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),Var("t1__'")]))])),[WithClause(Assign(Var("t1__'"),App(Seq(CallT(SVar("clean-layout-empty-symbols"),[],[NoAnnoList(Str("\"\"")),NoAnnoList(Op("FALSE",[])),NoAnnoList(Op("FALSE",[]))]),CallNoArgs(SVar("flatten-list"))),NoAnnoList(List([App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-Haskell-Exp"))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))]))),Var("t1__")),NoAnnoList(Op("S",[NoAnnoList(Str("\" \""))])),App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-Haskell-Exp"))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))]))),Var("t2__"))])))))])),SDefNoArgs("is-Haskell-Exp",Match(NoAnnoList(Op("AppBin",[Wld,Wld])))),RDefNoArgs("Haskell-get-indent",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("AppBin",[Var("t1__"),Var("t2__")]))),Var("index")])),Var("indent"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("indent"),NoAnnoList(Str("\"\"")))),SwitchCase(Match(NoAnnoList(Int("2"))),Assign(Var("indent"),NoAnnoList(Str("\"\""))))],Assign(Var("indent"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-separator",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("AppBin",[Var("t1__"),Var("t2__")]))),Var("index")])),Var("separator"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("separator"),NoAnnoList(Str("\"\"")))),SwitchCase(Match(NoAnnoList(Int("2"))),Assign(Var("separator"),NoAnnoList(Str("\"\""))))],Assign(Var("separator"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-leading-ws",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("AppBin",[Var("t1__"),Var("t2__")]))),Var("index")])),Var("ws"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("ws"),NoAnnoList(Str("\"\"")))),SwitchCase(Match(NoAnnoList(Int("2"))),Assign(Var("ws"),NoAnnoList(Str("\" \""))))],Assign(Var("ws"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("prettyprint-Haskell-Exp",Rule(NoAnnoList(Op("Negation",[Var("t1__")])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),Var("t1__'")]))])),[WithClause(Assign(Var("t1__'"),App(Seq(CallT(SVar("clean-layout-empty-symbols"),[],[NoAnnoList(Str("\"\"")),NoAnnoList(Op("FALSE",[])),NoAnnoList(Op("FALSE",[]))]),CallNoArgs(SVar("flatten-list"))),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"-\""))])),NoAnnoList(Op("S",[NoAnnoList(Str("\" \""))])),App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-Haskell-Exp"))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))]))),Var("t1__"))])))))])),SDefNoArgs("is-Haskell-Exp",Match(NoAnnoList(Op("Negation",[Wld])))),RDefNoArgs("Haskell-get-indent",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Negation",[Var("t1__")]))),Var("index")])),Var("indent"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("indent"),NoAnnoList(Str("\"\""))))],Assign(Var("indent"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-separator",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Negation",[Var("t1__")]))),Var("index")])),Var("separator"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("separator"),NoAnnoList(Str("\"\""))))],Assign(Var("separator"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-leading-ws",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Negation",[Var("t1__")]))),Var("index")])),Var("ws"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("ws"),NoAnnoList(Str("\" \""))))],Assign(Var("ws"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("prettyprint-Haskell-Exp",Rule(NoAnnoList(Op("OpApp",[Var("t1__"),Var("t2__"),Var("t3__")])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),Var("t1__'")]))])),[WithClause(Assign(Var("t1__'"),App(Seq(CallT(SVar("clean-layout-empty-symbols"),[],[NoAnnoList(Str("\"\"")),NoAnnoList(Op("FALSE",[])),NoAnnoList(Op("FALSE",[]))]),CallNoArgs(SVar("flatten-list"))),NoAnnoList(List([App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-Haskell-Exp"))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))]))),Var("t1__")),NoAnnoList(Op("S",[NoAnnoList(Str("\" \""))])),App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-Haskell-Qop"))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))]))),Var("t2__")),NoAnnoList(Op("S",[NoAnnoList(Str("\" \""))])),App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-Haskell-Exp"))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))]))),Var("t3__"))])))))])),SDefNoArgs("is-Haskell-Exp",Match(NoAnnoList(Op("OpApp",[Wld,Wld,Wld])))),RDefNoArgs("Haskell-get-indent",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("OpApp",[Var("t1__"),Var("t2__"),Var("t3__")]))),Var("index")])),Var("indent"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("indent"),NoAnnoList(Str("\"\"")))),SwitchCase(Match(NoAnnoList(Int("2"))),Assign(Var("indent"),NoAnnoList(Str("\"\"")))),SwitchCase(Match(NoAnnoList(Int("3"))),Assign(Var("indent"),NoAnnoList(Str("\"\""))))],Assign(Var("indent"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-separator",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("OpApp",[Var("t1__"),Var("t2__"),Var("t3__")]))),Var("index")])),Var("separator"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("separator"),NoAnnoList(Str("\"\"")))),SwitchCase(Match(NoAnnoList(Int("2"))),Assign(Var("separator"),NoAnnoList(Str("\"\"")))),SwitchCase(Match(NoAnnoList(Int("3"))),Assign(Var("separator"),NoAnnoList(Str("\"\""))))],Assign(Var("separator"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-leading-ws",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("OpApp",[Var("t1__"),Var("t2__"),Var("t3__")]))),Var("index")])),Var("ws"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("ws"),NoAnnoList(Str("\"\"")))),SwitchCase(Match(NoAnnoList(Int("2"))),Assign(Var("ws"),NoAnnoList(Str("\" \"")))),SwitchCase(Match(NoAnnoList(Int("3"))),Assign(Var("ws"),NoAnnoList(Str("\" \""))))],Assign(Var("ws"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("prettyprint-Haskell-Exp",Rule(NoAnnoList(Op("Typed",[Var("t1__"),Var("t2__"),Var("t3__")])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),Var("t1__'")]))])),[WithClause(Assign(Var("t1__'"),App(Seq(CallT(SVar("clean-layout-empty-symbols"),[],[NoAnnoList(Str("\"\"")),NoAnnoList(Op("FALSE",[])),NoAnnoList(Op("FALSE",[]))]),CallNoArgs(SVar("flatten-list"))),NoAnnoList(List([App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-Haskell-Exp"))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))]))),Var("t1__")),NoAnnoList(Op("S",[NoAnnoList(Str("\" \""))])),NoAnnoList(Op("S",[NoAnnoList(Str("\"::\""))])),NoAnnoList(Op("S",[NoAnnoList(Str("\" \""))])),App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),Call(SVar("pp-option"),[LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-Haskell-Context"))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))])))])),Var("t2__")),NoAnnoList(Op("S",[NoAnnoList(Str("\" \""))])),App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-Haskell-Type"))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))]))),Var("t3__"))])))))])),SDefNoArgs("is-Haskell-Exp",Match(NoAnnoList(Op("Typed",[Wld,Wld,Wld])))),RDefNoArgs("Haskell-get-indent",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Typed",[Var("t1__"),Var("t2__"),Var("t3__")]))),Var("index")])),Var("indent"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("indent"),NoAnnoList(Str("\"\"")))),SwitchCase(Match(NoAnnoList(Int("2"))),Assign(Var("indent"),NoAnnoList(Str("\"\"")))),SwitchCase(Match(NoAnnoList(Int("3"))),Assign(Var("indent"),NoAnnoList(Str("\"\""))))],Assign(Var("indent"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-separator",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Typed",[Var("t1__"),Var("t2__"),Var("t3__")]))),Var("index")])),Var("separator"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("separator"),NoAnnoList(Str("\"\"")))),SwitchCase(Match(NoAnnoList(Int("2"))),Assign(Var("separator"),NoAnnoList(Str("\"\"")))),SwitchCase(Match(NoAnnoList(Int("3"))),Assign(Var("separator"),NoAnnoList(Str("\"\""))))],Assign(Var("separator"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-leading-ws",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Typed",[Var("t1__"),Var("t2__"),Var("t3__")]))),Var("index")])),Var("ws"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("ws"),NoAnnoList(Str("\"\"")))),SwitchCase(Match(NoAnnoList(Int("2"))),Assign(Var("ws"),NoAnnoList(Str("\" \"")))),SwitchCase(Match(NoAnnoList(Int("3"))),Assign(Var("ws"),NoAnnoList(Str("\" \""))))],Assign(Var("ws"),NoAnnoList(Str("\"\"")))))])),SDefNoArgs("is-Haskell-Exp",Fail),RDefNoArgs("prettyprint-Haskell-Exp",RuleNoCond(NoAnnoList(Op("amb",[NoAnnoList(ListTail([Var("h")],Var("hs")))])),App(CallNoArgs(SVar("prettyprint-Haskell-Exp")),Var("h")))),RDefNoArgs("prettyprint-Haskell-Qvar",RuleNoCond(NoAnnoList(Op("Qvar-Plhdr",[])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Qvar\""))]))]))]))])))),SDefNoArgs("is-Haskell-Qvar",Match(NoAnnoList(Op("Qvar-Plhdr",[])))),RDefNoArgs("prettyprint-Haskell-LabelBinds",RuleNoCond(NoAnnoList(Op("LabelBinds-Plhdr",[])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$LabelBinds\""))]))]))]))])))),SDefNoArgs("is-Haskell-LabelBinds",Match(NoAnnoList(Op("LabelBinds-Plhdr",[])))),RDefNoArgs("prettyprint-Haskell-Qop",RuleNoCond(NoAnnoList(Op("Qop-Plhdr",[])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Qop\""))]))]))]))])))),SDefNoArgs("is-Haskell-Qop",Match(NoAnnoList(Op("Qop-Plhdr",[])))),RDefNoArgs("prettyprint-Haskell-Exp",RuleNoCond(NoAnnoList(Op("Exp-Plhdr",[])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Exp\""))]))]))]))])))),SDefNoArgs("is-Haskell-Exp",Match(NoAnnoList(Op("Exp-Plhdr",[])))),RDefNoArgs("prettyprint-Haskell-Context",RuleNoCond(NoAnnoList(Op("Context-Plhdr",[])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Context\""))]))]))]))])))),SDefNoArgs("is-Haskell-Context",Match(NoAnnoList(Op("Context-Plhdr",[])))),RDefNoArgs("prettyprint-Haskell-Type",RuleNoCond(NoAnnoList(Op("Type-Plhdr",[])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Type\""))]))]))]))])))),SDefNoArgs("is-Haskell-Type",Match(NoAnnoList(Op("Type-Plhdr",[])))),RDefNoArgs("prettyprint-Haskell-Qvar",RuleNoCond(NoAnnoList(Op("Qvar-Plhdr",[Wld])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Qvar\""))]))]))]))])))),SDefNoArgs("is-Haskell-Qvar",Match(NoAnnoList(Op("Qvar-Plhdr",[Wld])))),RDefNoArgs("prettyprint-Haskell-LabelBinds",RuleNoCond(NoAnnoList(Op("LabelBinds-Plhdr",[Wld])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$LabelBinds\""))]))]))]))])))),SDefNoArgs("is-Haskell-LabelBinds",Match(NoAnnoList(Op("LabelBinds-Plhdr",[Wld])))),RDefNoArgs("prettyprint-Haskell-Qop",RuleNoCond(NoAnnoList(Op("Qop-Plhdr",[Wld])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Qop\""))]))]))]))])))),SDefNoArgs("is-Haskell-Qop",Match(NoAnnoList(Op("Qop-Plhdr",[Wld])))),RDefNoArgs("prettyprint-Haskell-Exp",RuleNoCond(NoAnnoList(Op("Exp-Plhdr",[Wld])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Exp\""))]))]))]))])))),SDefNoArgs("is-Haskell-Exp",Match(NoAnnoList(Op("Exp-Plhdr",[Wld])))),RDefNoArgs("prettyprint-Haskell-Context",RuleNoCond(NoAnnoList(Op("Context-Plhdr",[Wld])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Context\""))]))]))]))])))),SDefNoArgs("is-Haskell-Context",Match(NoAnnoList(Op("Context-Plhdr",[Wld])))),RDefNoArgs("prettyprint-Haskell-Type",RuleNoCond(NoAnnoList(Op("Type-Plhdr",[Wld])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Type\""))]))]))]))])))),SDefNoArgs("is-Haskell-Type",Match(NoAnnoList(Op("Type-Plhdr",[Wld])))),RDefNoArgs("prettyprint-Haskell-Context",RuleNoCond(NoAnnoList(Op("Context-Opt-Plhdr",[])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"\""))]))]))]))])))),SDefNoArgs("is-Haskell-Context",Match(NoAnnoList(Op("Context-Opt-Plhdr",[]))))]),Strategies([SDefNoArgs("prettyprint-Haskell",CallNoArgs(SVar("prettyprint-Haskell-Exp"))),RDefT("prettyprint-Haskell",[],[DefaultVarDec("sort")],Rule(Var("t"),RootApp(CallNoArgs(SVar("prettyprint-Haskell-Exp"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),RDefNoArgs("prettyprint-Haskell-Exp",Rule(NoAnnoList(Op("Abs",[Var("t1__"),Var("t2__")])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),Var("t1__'")]))])),[WithClause(Assign(Var("t1__'"),App(Seq(CallT(SVar("clean-layout-empty-symbols"),[],[NoAnnoList(Str("\"\"")),NoAnnoList(Op("FALSE",[])),NoAnnoList(Op("FALSE",[]))]),CallNoArgs(SVar("flatten-list"))),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"\\\\\""))])),NoAnnoList(Op("S",[NoAnnoList(Str("\" \""))])),App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-Haskell-Fargs"))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))]))),Var("t1__")),NoAnnoList(Op("S",[NoAnnoList(Str("\" \""))])),NoAnnoList(Op("S",[NoAnnoList(Str("\"->\""))])),NoAnnoList(Op("S",[NoAnnoList(Str("\" \""))])),App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-Haskell-Exp"))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))]))),Var("t2__"))])))))])),SDefNoArgs("is-Haskell-Exp",Match(NoAnnoList(Op("Abs",[Wld,Wld])))),RDefNoArgs("Haskell-get-indent",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Abs",[Var("t1__"),Var("t2__")]))),Var("index")])),Var("indent"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("indent"),NoAnnoList(Str("\"\"")))),SwitchCase(Match(NoAnnoList(Int("2"))),Assign(Var("indent"),NoAnnoList(Str("\"\""))))],Assign(Var("indent"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-separator",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Abs",[Var("t1__"),Var("t2__")]))),Var("index")])),Var("separator"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("separator"),NoAnnoList(Str("\"\"")))),SwitchCase(Match(NoAnnoList(Int("2"))),Assign(Var("separator"),NoAnnoList(Str("\"\""))))],Assign(Var("separator"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-leading-ws",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Abs",[Var("t1__"),Var("t2__")]))),Var("index")])),Var("ws"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("ws"),NoAnnoList(Str("\" \"")))),SwitchCase(Match(NoAnnoList(Int("2"))),Assign(Var("ws"),NoAnnoList(Str("\" \""))))],Assign(Var("ws"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("prettyprint-Haskell-Exp",Rule(NoAnnoList(Op("Let",[Var("t1__"),Var("t2__")])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),Var("t1__'")]))])),[WithClause(Assign(Var("t1__'"),App(Seq(CallT(SVar("clean-layout-empty-symbols"),[],[NoAnnoList(Str("\"\"")),NoAnnoList(Op("FALSE",[])),NoAnnoList(Op("FALSE",[]))]),CallNoArgs(SVar("flatten-list"))),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"let\""))])),NoAnnoList(Op("S",[NoAnnoList(Str("\" \""))])),App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-Haskell-Declbinds"))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))]))),Var("t1__")),NoAnnoList(Op("S",[NoAnnoList(Str("\" \""))])),NoAnnoList(Op("S",[NoAnnoList(Str("\"in\""))])),NoAnnoList(Op("S",[NoAnnoList(Str("\" \""))])),App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-Haskell-Exp"))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))]))),Var("t2__"))])))))])),SDefNoArgs("is-Haskell-Exp",Match(NoAnnoList(Op("Let",[Wld,Wld])))),RDefNoArgs("Haskell-get-indent",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Let",[Var("t1__"),Var("t2__")]))),Var("index")])),Var("indent"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("indent"),NoAnnoList(Str("\"\"")))),SwitchCase(Match(NoAnnoList(Int("2"))),Assign(Var("indent"),NoAnnoList(Str("\"\""))))],Assign(Var("indent"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-separator",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Let",[Var("t1__"),Var("t2__")]))),Var("index")])),Var("separator"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("separator"),NoAnnoList(Str("\"\"")))),SwitchCase(Match(NoAnnoList(Int("2"))),Assign(Var("separator"),NoAnnoList(Str("\"\""))))],Assign(Var("separator"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-leading-ws",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Let",[Var("t1__"),Var("t2__")]))),Var("index")])),Var("ws"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("ws"),NoAnnoList(Str("\" \"")))),SwitchCase(Match(NoAnnoList(Int("2"))),Assign(Var("ws"),NoAnnoList(Str("\" \""))))],Assign(Var("ws"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("prettyprint-Haskell-Exp",Rule(NoAnnoList(Op("If",[Var("t1__"),Var("t2__"),Var("t3__")])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),Var("t1__'")]))])),[WithClause(Assign(Var("t1__'"),App(Seq(CallT(SVar("clean-layout-empty-symbols"),[],[NoAnnoList(Str("\"\"")),NoAnnoList(Op("FALSE",[])),NoAnnoList(Op("FALSE",[]))]),CallNoArgs(SVar("flatten-list"))),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"if\""))])),NoAnnoList(Op("S",[NoAnnoList(Str("\" \""))])),App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-Haskell-AnyExp"))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))]))),Var("t1__")),NoAnnoList(Op("S",[NoAnnoList(Str("\" \""))])),NoAnnoList(Op("S",[NoAnnoList(Str("\"then\""))])),NoAnnoList(Op("S",[NoAnnoList(Str("\" \""))])),App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-Haskell-AnyExp"))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))]))),Var("t2__")),NoAnnoList(Op("S",[NoAnnoList(Str("\" \""))])),NoAnnoList(Op("S",[NoAnnoList(Str("\"else\""))])),NoAnnoList(Op("S",[NoAnnoList(Str("\" \""))])),App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-Haskell-Exp"))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))]))),Var("t3__"))])))))])),SDefNoArgs("is-Haskell-Exp",Match(NoAnnoList(Op("If",[Wld,Wld,Wld])))),RDefNoArgs("Haskell-get-indent",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("If",[Var("t1__"),Var("t2__"),Var("t3__")]))),Var("index")])),Var("indent"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("indent"),NoAnnoList(Str("\"\"")))),SwitchCase(Match(NoAnnoList(Int("2"))),Assign(Var("indent"),NoAnnoList(Str("\"\"")))),SwitchCase(Match(NoAnnoList(Int("3"))),Assign(Var("indent"),NoAnnoList(Str("\"\""))))],Assign(Var("indent"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-separator",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("If",[Var("t1__"),Var("t2__"),Var("t3__")]))),Var("index")])),Var("separator"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("separator"),NoAnnoList(Str("\"\"")))),SwitchCase(Match(NoAnnoList(Int("2"))),Assign(Var("separator"),NoAnnoList(Str("\"\"")))),SwitchCase(Match(NoAnnoList(Int("3"))),Assign(Var("separator"),NoAnnoList(Str("\"\""))))],Assign(Var("separator"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-leading-ws",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("If",[Var("t1__"),Var("t2__"),Var("t3__")]))),Var("index")])),Var("ws"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("ws"),NoAnnoList(Str("\" \"")))),SwitchCase(Match(NoAnnoList(Int("2"))),Assign(Var("ws"),NoAnnoList(Str("\" \"")))),SwitchCase(Match(NoAnnoList(Int("3"))),Assign(Var("ws"),NoAnnoList(Str("\" \""))))],Assign(Var("ws"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("prettyprint-Haskell-Exp",Rule(NoAnnoList(Op("Do",[Var("t1__")])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),Var("t1__'")]))])),[WithClause(Assign(Var("t1__'"),App(Seq(CallT(SVar("clean-layout-empty-symbols"),[],[NoAnnoList(Str("\"\"")),NoAnnoList(Op("FALSE",[])),NoAnnoList(Op("FALSE",[]))]),CallNoArgs(SVar("flatten-list"))),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"do\""))])),NoAnnoList(Op("S",[NoAnnoList(Str("\" \""))])),App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-Haskell-StmtList"))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))]))),Var("t1__"))])))))])),SDefNoArgs("is-Haskell-Exp",Match(NoAnnoList(Op("Do",[Wld])))),RDefNoArgs("Haskell-get-indent",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Do",[Var("t1__")]))),Var("index")])),Var("indent"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("indent"),NoAnnoList(Str("\"\""))))],Assign(Var("indent"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-separator",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Do",[Var("t1__")]))),Var("index")])),Var("separator"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("separator"),NoAnnoList(Str("\"\""))))],Assign(Var("separator"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-leading-ws",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Do",[Var("t1__")]))),Var("index")])),Var("ws"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("ws"),NoAnnoList(Str("\" \""))))],Assign(Var("ws"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("prettyprint-Haskell-Exp",Rule(NoAnnoList(Op("Case",[Var("t1__"),Var("t2__")])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),Var("t1__'")]))])),[WithClause(Assign(Var("t1__'"),App(Seq(CallT(SVar("clean-layout-empty-symbols"),[],[NoAnnoList(Str("\"\"")),NoAnnoList(Op("FALSE",[])),NoAnnoList(Op("FALSE",[]))]),CallNoArgs(SVar("flatten-list"))),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"case\""))])),NoAnnoList(Op("S",[NoAnnoList(Str("\" \""))])),App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-Haskell-AnyExp"))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))]))),Var("t1__")),NoAnnoList(Op("S",[NoAnnoList(Str("\" \""))])),NoAnnoList(Op("S",[NoAnnoList(Str("\"of\""))])),NoAnnoList(Op("S",[NoAnnoList(Str("\" \""))])),App(LChoice(Seq(CallNoArgs(SVar("check-nonterminal-isEmpty")),Id),LChoice(Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-Haskell-AltList"))]),Call(SVar("pp-one-Z"),[CallNoArgs(SVar("prettyprint-completion-aux"))]))),Var("t2__"))])))))])),SDefNoArgs("is-Haskell-Exp",Match(NoAnnoList(Op("Case",[Wld,Wld])))),RDefNoArgs("Haskell-get-indent",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Case",[Var("t1__"),Var("t2__")]))),Var("index")])),Var("indent"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("indent"),NoAnnoList(Str("\"\"")))),SwitchCase(Match(NoAnnoList(Int("2"))),Assign(Var("indent"),NoAnnoList(Str("\"\""))))],Assign(Var("indent"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-separator",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Case",[Var("t1__"),Var("t2__")]))),Var("index")])),Var("separator"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("separator"),NoAnnoList(Str("\"\"")))),SwitchCase(Match(NoAnnoList(Int("2"))),Assign(Var("separator"),NoAnnoList(Str("\"\""))))],Assign(Var("separator"),NoAnnoList(Str("\"\"")))))])),RDefNoArgs("Haskell-get-leading-ws",Rule(NoAnnoList(Tuple([As(Var("t"),NoAnnoList(Op("Case",[Var("t1__"),Var("t2__")]))),Var("index")])),Var("ws"),[WhereClause(Seq(Assign(Var("sort"),App(CallNoArgs(SVar("ia-get-sort")),Var("t"))),BA(Match(NoAnnoList(Str("\"Exp\""))),Var("sort")))),WithClause(SwitchChoice(Build(Var("index")),[SwitchCase(Match(NoAnnoList(Int("1"))),Assign(Var("ws"),NoAnnoList(Str("\" \"")))),SwitchCase(Match(NoAnnoList(Int("2"))),Assign(Var("ws"),NoAnnoList(Str("\" \""))))],Assign(Var("ws"),NoAnnoList(Str("\"\"")))))])),SDefNoArgs("is-Haskell-Exp",Fail),RDefNoArgs("prettyprint-Haskell-Exp",RuleNoCond(NoAnnoList(Op("amb",[NoAnnoList(ListTail([Var("h")],Var("hs")))])),App(CallNoArgs(SVar("prettyprint-Haskell-Exp")),Var("h")))),RDefNoArgs("prettyprint-Haskell-Fargs",RuleNoCond(NoAnnoList(Op("Fargs-Plhdr",[])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Fargs\""))]))]))]))])))),SDefNoArgs("is-Haskell-Fargs",Match(NoAnnoList(Op("Fargs-Plhdr",[])))),RDefNoArgs("prettyprint-Haskell-Declbinds",RuleNoCond(NoAnnoList(Op("Declbinds-Plhdr",[])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Declbinds\""))]))]))]))])))),SDefNoArgs("is-Haskell-Declbinds",Match(NoAnnoList(Op("Declbinds-Plhdr",[])))),RDefNoArgs("prettyprint-Haskell-StmtList",RuleNoCond(NoAnnoList(Op("StmtList-Plhdr",[])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$StmtList\""))]))]))]))])))),SDefNoArgs("is-Haskell-StmtList",Match(NoAnnoList(Op("StmtList-Plhdr",[])))),RDefNoArgs("prettyprint-Haskell-Exp",RuleNoCond(NoAnnoList(Op("Exp-Plhdr",[])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Exp\""))]))]))]))])))),SDefNoArgs("is-Haskell-Exp",Match(NoAnnoList(Op("Exp-Plhdr",[])))),RDefNoArgs("prettyprint-Haskell-AnyExp",RuleNoCond(NoAnnoList(Op("AnyExp-Plhdr",[])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$AnyExp\""))]))]))]))])))),SDefNoArgs("is-Haskell-AnyExp",Match(NoAnnoList(Op("AnyExp-Plhdr",[])))),RDefNoArgs("prettyprint-Haskell-AltList",RuleNoCond(NoAnnoList(Op("AltList-Plhdr",[])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$AltList\""))]))]))]))])))),SDefNoArgs("is-Haskell-AltList",Match(NoAnnoList(Op("AltList-Plhdr",[])))),RDefNoArgs("prettyprint-Haskell-Fargs",RuleNoCond(NoAnnoList(Op("Fargs-Plhdr",[Wld])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Fargs\""))]))]))]))])))),SDefNoArgs("is-Haskell-Fargs",Match(NoAnnoList(Op("Fargs-Plhdr",[Wld])))),RDefNoArgs("prettyprint-Haskell-Declbinds",RuleNoCond(NoAnnoList(Op("Declbinds-Plhdr",[Wld])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Declbinds\""))]))]))]))])))),SDefNoArgs("is-Haskell-Declbinds",Match(NoAnnoList(Op("Declbinds-Plhdr",[Wld])))),RDefNoArgs("prettyprint-Haskell-StmtList",RuleNoCond(NoAnnoList(Op("StmtList-Plhdr",[Wld])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$StmtList\""))]))]))]))])))),SDefNoArgs("is-Haskell-StmtList",Match(NoAnnoList(Op("StmtList-Plhdr",[Wld])))),RDefNoArgs("prettyprint-Haskell-Exp",RuleNoCond(NoAnnoList(Op("Exp-Plhdr",[Wld])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$Exp\""))]))]))]))])))),SDefNoArgs("is-Haskell-Exp",Match(NoAnnoList(Op("Exp-Plhdr",[Wld])))),RDefNoArgs("prettyprint-Haskell-AnyExp",RuleNoCond(NoAnnoList(Op("AnyExp-Plhdr",[Wld])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$AnyExp\""))]))]))]))])))),SDefNoArgs("is-Haskell-AnyExp",Match(NoAnnoList(Op("AnyExp-Plhdr",[Wld])))),RDefNoArgs("prettyprint-Haskell-AltList",RuleNoCond(NoAnnoList(Op("AltList-Plhdr",[Wld])),NoAnnoList(List([NoAnnoList(Op("H",[NoAnnoList(List([NoAnnoList(Op("SOpt",[NoAnnoList(Op("HS",[])),NoAnnoList(Str("\"0\""))]))])),NoAnnoList(List([NoAnnoList(Op("S",[NoAnnoList(Str("\"$AltList\""))]))]))]))])))),SDefNoArgs("is-Haskell-AltList",Match(NoAnnoList(Op("AltList-Plhdr",[Wld]))))])])