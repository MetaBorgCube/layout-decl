Module("libspoofax/editor/refactoring/construct-initial-list-structure",[Imports([Import("libspoofax/term/origin")]),Rules([SDefT("origin-separation",[VarDec("pp",ConstType(SortNoArgs("ATerm")))],[VarDec("some-elem",ConstType(SortNoArgs("ATerm")))],Seq(CallT(SVar("construct-initial-list-structure"),[CallT(SVar("pp"),[],[])],[Var("some-elem")]),Match(NoAnnoList(Tuple([Wld,RootApp(Id)]))))),SDefT("whitespace-at-start",[VarDec("pp",ConstType(SortNoArgs("ATerm")))],[VarDec("some-elem",ConstType(SortNoArgs("ATerm")))],Seq(CallT(SVar("construct-initial-list-structure"),[CallT(SVar("pp"),[],[])],[Var("some-elem")]),Match(NoAnnoList(Tuple([RootApp(Id),Wld]))))),SDefT("construct-initial-list-structure",[VarDec("pp",ConstType(SortNoArgs("ATerm")))],[VarDec("some-elem",ConstType(SortNoArgs("ATerm")))],SRule(Rule(Var("elemOrList"),NoAnnoList(Tuple([Var("whitespace-at-start''"),Var("sep''")])),[WhereClause(Seq(Assign(Var("list"),App(GuardedLChoice(Match(NoAnnoList(List([]))),Id,GuardedLChoice(Seq(Match(NoAnnoList(List([Var("e")]))),Seq(Build(Var("e")),CallT(SVar("get-parent"),[],[]))),Id,CallT(SVar("get-parent"),[],[]))),Var("elemOrList"))),BA(CallT(SVar("leq"),[],[]),NoAnnoList(Tuple([App(CallT(SVar("length"),[],[]),Var("list")),NoAnnoList(Int("1"))]))))),WithClause(Seq(Assign(Var("elem-text"),App(CallT(SVar("pp"),[],[]),Var("some-elem"))),Seq(Assign(Var("parent"),App(CallT(SVar("get-parent"),[],[]),Var("list"))),Seq(Assign(Var("dummy1"),App(Seq(CallT(SVar("oncetd"),[Seq(CallT(SVar("origin-equal"),[],[Var("list")]),Build(NoAnnoList(List([Var("some-elem"),Var("some-elem")]))))],[]),CallT(SVar("pp"),[],[])),Var("parent"))),Assign(Var("dummy2"),App(Seq(CallT(SVar("oncetd"),[Seq(CallT(SVar("origin-equal"),[],[Var("list")]),Build(NoAnnoList(List([Var("some-elem")]))))],[]),CallT(SVar("pp"),[],[])),Var("parent"))))))),WithClause(Seq(Assign(Var("zipped"),App(CallT(SVar("zipPad"),[Id,Build(NoAnnoList(Int("0")))],[]),NoAnnoList(Tuple([App(CallT(SVar("explode-string"),[],[]),Var("dummy1")),App(CallT(SVar("explode-string"),[],[]),Var("dummy2"))])))),Seq(Assign(Var("index"),App(CallT(SVar("get-index0"),[Not(CallT(SVar("eq"),[],[]))],[]),Var("zipped"))),Seq(Assign(NoAnnoList(Tuple([Var("before"),Var("after")])),App(Seq(CallT(SVar("explode-string"),[],[]),Seq(CallT(SVar("split-at"),[],[Var("index")]),Seq(Match(NoAnnoList(Tuple([Var("b"),Var("a")]))),Build(NoAnnoList(Tuple([App(CallT(SVar("implode-string"),[],[]),Var("b")),App(CallT(SVar("implode-string"),[],[]),Var("a"))])))))),Var("dummy1"))),Seq(Assign(Var("whitespace-at-start"),App(Seq(Build(NoAnnoList(Tuple([RootApp(Id),Var("elem-text")]))),Seq(CallT(SVar("split-before-last-occurrence"),[],[]),Seq(Match(NoAnnoList(Tuple([RootApp(Id),Wld]))),CallT(SVar("string-as-chars"),[Seq(CallT(SVar("reverse"),[],[]),Seq(CallT(SVar("take-while"),[GuardedLChoice(CallT(SVar("is-whitespace"),[],[]),Id,Test(CharCong("'\\n'")))],[]),CallT(SVar("reverse"),[],[])))],[])))),Var("before"))),Assign(Var("sep"),App(CallT(SVar("conc-strings"),[],[]),NoAnnoList(Tuple([App(Seq(CallT(SVar("split-after-last-occurrence"),[],[]),Match(NoAnnoList(Tuple([Wld,RootApp(Id)])))),NoAnnoList(Tuple([Var("before"),Var("elem-text")]))),App(Seq(CallT(SVar("split-before"),[],[]),Match(NoAnnoList(Tuple([RootApp(Id),Wld])))),NoAnnoList(Tuple([Var("after"),Var("elem-text")])))]))))))))),WithClause(Seq(Assign(Var("dummy-indent"),App(Seq(CallT(SVar("get-parent"),[],[]),CallT(SVar("origin-indent"),[],[])),Var("list"))),Seq(Assign(Var("whitespace-at-start'"),App(CallT(SVar("prefix-lines"),[],[Var("dummy-indent")]),Var("whitespace-at-start"))),Seq(Assign(Var("sep'"),App(CallT(SVar("prefix-lines"),[],[Var("dummy-indent")]),Var("sep"))),Seq(Assign(Var("whitespace-at-start''"),App(Seq(CallT(SVar("split-after"),[],[]),Match(NoAnnoList(Tuple([Wld,RootApp(Id)])))),NoAnnoList(Tuple([Var("whitespace-at-start'"),Var("dummy-indent")])))),Assign(Var("sep''"),App(Seq(CallT(SVar("split-after"),[],[]),Match(NoAnnoList(Tuple([Wld,RootApp(Id)])))),NoAnnoList(Tuple([Var("sep'"),Var("dummy-indent")])))))))))]))),SDefT("split-after-last-occurrence",[],[],Seq(Match(NoAnnoList(Tuple([Var("l"),Var("sub")]))),Seq(CallT(SVar("split-after"),[],[]),Seq(Match(NoAnnoList(Tuple([Var("before"),Var("after")]))),CallT(SVar("try"),[Seq(Build(Var("after")),Seq(CallT(SVar("is-substring"),[Build(Var("sub"))],[]),Seq(Build(NoAnnoList(Tuple([Var("after"),Var("sub")]))),CallT(SVar("split-after-last-occurrence"),[],[]))))],[]))))),SDefT("split-before-last-occurrence",[],[],Seq(Match(NoAnnoList(Tuple([Wld,Var("sub")]))),Seq(CallT(SVar("split-after-last-occurrence"),[],[]),Seq(Match(NoAnnoList(Tuple([Var("before"),Wld]))),Seq(Build(NoAnnoList(Tuple([Var("before"),Var("sub")]))),CallT(SVar("split-before"),[],[]))))))]),Rules([SDefT("get-parent",[],[],Prim("\"SSL_EXT_get_parent\"",[RootApp(Id)]))])])