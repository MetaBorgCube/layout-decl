Module("analysis",[Rules([SDefT("editor-analyze",[],[],SRule(Rule(NoAnnoList(Tuple([Var("ast"),Var("path"),Var("project-path")])),NoAnnoList(Tuple([Var("ast'"),Var("error*"),Var("warning*"),Var("info*")])),[WithClause(Seq(Assign(Var("ast'"),App(Id,Var("ast"))),Seq(Assign(Var("error*"),App(CallT(SVar("collect-all"),[CallT(SVar("constraint-error"),[],[])],[]),Var("ast'"))),Seq(Assign(Var("warning*"),App(CallT(SVar("collect-all"),[CallT(SVar("constraint-warning"),[],[])],[]),Var("ast'"))),Assign(Var("info*"),App(CallT(SVar("collect-all"),[CallT(SVar("constraint-info"),[],[])],[]),Var("ast'")))))))]))),SDefT("constraint-error",[],[],Fail),SDefT("constraint-warning",[],[],Fail),SDefT("constraint-info",[],[],Fail)]),Rules([SDefT("editor-resolve",[],[],SRule(Rule(NoAnnoList(Tuple([Var("node"),Var("position"),Var("ast"),Var("path"),Var("project-path")])),RootApp(Fail),[]))),SDefT("editor-hover",[],[],SRule(Rule(NoAnnoList(Tuple([Var("node"),Var("position"),Var("ast"),Var("path"),Var("project-path")])),RootApp(Fail),[])))]),Rules([SDefT("debug-show-analyzed",[],[],SRule(Rule(NoAnnoList(Tuple([Wld,Wld,Var("ast"),Var("path"),Wld])),NoAnnoList(Tuple([Var("filename"),Var("result")])),[WithClause(Seq(Assign(Var("filename"),App(CallT(SVar("guarantee-extension"),[],[NoAnnoList(Str("\"analyzed.aterm\""))]),Var("path"))),Assign(Var("result"),Var("ast"))))])))])])