Module("libspoofax/editor/refactoring/layout-adaption",[Imports([Import("libspoofax/term/origin"),Import("libspoofax/editor/refactoring/construct-text"),Import("libspoofax/editor/refactoring/construct-initial-list-structure")]),Rules([SDefT("TABSIZE",[],[],Build(NoAnnoList(Int("4"))))]),Rules([SDefT("ast-change-to-text-change",[VarDec("pp",ConstType(SortNoArgs("ATerm"))),VarDec("override-reconstruction",ConstType(SortNoArgs("ATerm"))),VarDec("resugar",ConstType(SortNoArgs("ATerm")))],[],SRule(Rule(NoAnnoList(Op("DELETION",[Var("origin-lst")])),Var("tc-deletion"),[WithClause(Assign(Var("tc-deletion"),App(CallT(SVar("create-textchange-delete"),[],[]),Var("origin-lst"))))]))),SDefT("ast-change-to-text-change",[VarDec("pp",ConstType(SortNoArgs("ATerm"))),VarDec("override-reconstruction",ConstType(SortNoArgs("ATerm"))),VarDec("resugar",ConstType(SortNoArgs("ATerm")))],[],SRule(Rule(NoAnnoList(Op("REPLACEMENT",[Var("origin-node"),Var("new-node")])),Var("tc-replacement"),[WithClause(Assign(Var("tc-replacement"),App(CallT(SVar("create-textchange-replace"),[CallT(SVar("pp"),[],[]),CallT(SVar("override-reconstruction"),[],[]),CallT(SVar("resugar"),[],[])],[]),NoAnnoList(Tuple([Var("origin-node"),Var("new-node")])))))]))),SDefT("ast-change-to-text-change",[VarDec("pp",ConstType(SortNoArgs("ATerm"))),VarDec("override-reconstruction",ConstType(SortNoArgs("ATerm"))),VarDec("resugar",ConstType(SortNoArgs("ATerm")))],[],SRule(Rule(NoAnnoList(Op("INSERT_BEFORE",[Var("origin-elem"),Var("new-elems")])),Var("tc-insert-before"),[WithClause(Assign(Var("tc-insert-before"),App(CallT(SVar("create-textchange-insert-before"),[CallT(SVar("pp"),[],[]),CallT(SVar("override-reconstruction"),[],[]),CallT(SVar("resugar"),[],[])],[]),NoAnnoList(Tuple([Var("origin-elem"),Var("new-elems")])))))]))),SDefT("ast-change-to-text-change",[VarDec("pp",ConstType(SortNoArgs("ATerm"))),VarDec("override-reconstruction",ConstType(SortNoArgs("ATerm"))),VarDec("resugar",ConstType(SortNoArgs("ATerm")))],[],SRule(Rule(NoAnnoList(Op("INSERT_AT_END",[Var("origin-elem"),Var("new-elems")])),Var("tc-insert-at-end"),[WithClause(Assign(Var("tc-insert-at-end"),App(CallT(SVar("create-textchange-insert-at-end"),[CallT(SVar("pp"),[],[]),CallT(SVar("override-reconstruction"),[],[]),CallT(SVar("resugar"),[],[])],[]),NoAnnoList(Tuple([Var("origin-elem"),Var("new-elems")])))))]))),SDefT("create-textchange-delete",[],[],SRule(Rule(Var("origin-elems"),NoAnnoList(Tuple([Var("start-offset"),Var("end-offset"),NoAnnoList(Str("\"\""))])),[WhereClause(Seq(Assign(Var("start-offset"),App(CallT(SVar("origin-deletion-start-offset"),[],[]),Var("origin-elems"))),Assign(Var("end-offset"),App(CallT(SVar("origin-deletion-end-offset"),[],[]),Var("origin-elems")))))]))),SDefT("create-textchange-replace",[VarDec("pp",ConstType(SortNoArgs("ATerm"))),VarDec("override-reconstruction",ConstType(SortNoArgs("ATerm"))),VarDec("resugar",ConstType(SortNoArgs("ATerm")))],[],SRule(Rule(NoAnnoList(Tuple([Var("origin-node"),Var("new-node")])),NoAnnoList(Tuple([Var("start-offset"),Var("end-offset"),Var("indented-text")])),[WhereClause(Seq(Assign(Var("start-offset"),App(CallT(SVar("origin-start-offset"),[],[]),Var("origin-node"))),Seq(Assign(Var("end-offset"),App(CallT(SVar("origin-end-offset"),[],[]),Var("origin-node"))),Seq(Assign(Var("text"),App(CallT(SVar("construct-text"),[CallT(SVar("pp"),[],[]),CallT(SVar("override-reconstruction"),[],[]),CallT(SVar("resugar"),[],[])],[]),Var("new-node"))),Assign(Var("indented-text"),App(CallT(SVar("adapt-indentation"),[],[Var("origin-node")]),Var("text")))))))]))),SDefT("create-textchange-insert-before",[VarDec("pp",ConstType(SortNoArgs("ATerm"))),VarDec("override-reconstruction",ConstType(SortNoArgs("ATerm"))),VarDec("resugar",ConstType(SortNoArgs("ATerm")))],[],SRule(Rule(NoAnnoList(Tuple([Var("origin-node"),Var("new-elems")])),NoAnnoList(Tuple([Var("offset"),Var("offset"),Var("insert-text")])),[WhereClause(Seq(Assign(Var("offset"),App(CallT(SVar("origin-insert-before-offset"),[],[]),Var("origin-node"))),Seq(Assign(Var("new-elems-text"),App(CallT(SVar("map"),[CallT(SVar("construct-text-list-element"),[CallT(SVar("pp"),[],[]),CallT(SVar("override-reconstruction"),[],[]),CallT(SVar("resugar"),[],[])],[Var("origin-node")])],[]),Var("new-elems"))),Assign(Var("insert-text"),App(CallT(SVar("concat-strings"),[],[]),Var("new-elems-text"))))))]))),SDefT("create-textchange-insert-at-end",[VarDec("pp",ConstType(SortNoArgs("ATerm"))),VarDec("override-reconstruction",ConstType(SortNoArgs("ATerm"))),VarDec("resugar",ConstType(SortNoArgs("ATerm")))],[],SRule(Rule(NoAnnoList(Tuple([Var("origin-node"),Var("new-elems")])),NoAnnoList(Tuple([Var("offset"),Var("offset"),Var("insert-text")])),[WhereClause(Seq(Assign(Var("offset"),App(CallT(SVar("origin-insert-at-end-offset"),[],[]),Var("origin-node"))),Seq(Assign(Var("new-elems-text"),App(CallT(SVar("at-init"),[CallT(SVar("construct-text-list-element"),[CallT(SVar("pp"),[],[]),CallT(SVar("override-reconstruction"),[],[]),CallT(SVar("resugar"),[],[])],[Var("origin-node")]),CallT(SVar("construct-text-list-element-last"),[CallT(SVar("pp"),[],[]),CallT(SVar("override-reconstruction"),[],[]),CallT(SVar("resugar"),[],[])],[Var("origin-node")])],[]),Var("new-elems"))),GuardedLChoice(Where(Assign(NoAnnoList(List([])),Var("origin-node"))),Assign(Var("insert-text"),App(CallT(SVar("conc-strings"),[],[]),NoAnnoList(Tuple([App(CallT(SVar("whitespace-at-start"),[CallT(SVar("pp"),[],[])],[App(CallT(SVar("Hd"),[],[]),Var("new-elems"))]),Var("origin-node")),App(CallT(SVar("concat-strings"),[],[]),Var("new-elems-text"))])))),Assign(Var("insert-text"),App(CallT(SVar("add-separation-before"),[CallT(SVar("pp"),[],[])],[Var("new-elems")]),NoAnnoList(Tuple([Var("origin-node"),App(CallT(SVar("concat-strings"),[],[]),Var("new-elems-text"))]))))))))])))]),Rules([SDefT("construct-text-list-element",[VarDec("pp",ConstType(SortNoArgs("ATerm"))),VarDec("override-reconstruction",ConstType(SortNoArgs("ATerm"))),VarDec("resugar",ConstType(SortNoArgs("ATerm")))],[VarDec("origin-node",ConstType(SortNoArgs("ATerm")))],SRule(Rule(Var("elem"),Var("elem-text"),[WhereClause(Seq(Assign(Var("text"),App(CallT(SVar("construct-text"),[CallT(SVar("pp"),[],[]),CallT(SVar("override-reconstruction"),[],[]),CallT(SVar("resugar"),[],[])],[]),Var("elem"))),Seq(Assign(Var("layout-before"),App(Seq(CallT(SVar("layout-prefix"),[],[]),CallT(SVar("correct-indentation"),[],[Var("elem")])),Var("elem"))),Seq(Assign(Var("indented-prefix-text"),App(Seq(CallT(SVar("conc-strings"),[],[]),CallT(SVar("adapt-indentation"),[],[Var("origin-node")])),NoAnnoList(Tuple([Var("layout-before"),Var("text")])))),Seq(Assign(Var("comments-after"),App(Seq(CallT(SVar("comments-after"),[],[]),Seq(CallT(SVar("correct-indentation"),[],[Var("elem")]),CallT(SVar("adapt-indentation"),[],[Var("origin-node")]))),Var("elem"))),Seq(Assign(Var("separation"),App(GuardedLChoice(CallT(SVar("origin-separation"),[],[]),Id,CallT(SVar("origin-separation"),[CallT(SVar("pp"),[],[])],[Var("elem")])),Var("origin-node"))),Seq(Assign(Var("layout-after"),App(CallT(SVar("create-separation-after"),[],[]),NoAnnoList(Tuple([Var("separation"),Var("comments-after")])))),Assign(Var("elem-text"),App(CallT(SVar("conc-strings"),[],[]),NoAnnoList(Tuple([Var("indented-prefix-text"),Var("layout-after")])))))))))))]))),SDefT("construct-text-list-element-last",[VarDec("pp",ConstType(SortNoArgs("ATerm"))),VarDec("override-reconstruction",ConstType(SortNoArgs("ATerm"))),VarDec("resugar",ConstType(SortNoArgs("ATerm")))],[VarDec("origin-node",ConstType(SortNoArgs("ATerm")))],SRule(Rule(Var("elem"),Var("elem-text"),[WhereClause(Seq(Assign(Var("text"),App(CallT(SVar("construct-text"),[CallT(SVar("pp"),[],[]),CallT(SVar("override-reconstruction"),[],[]),CallT(SVar("resugar"),[],[])],[]),Var("elem"))),Seq(Assign(Var("layout-before"),App(Seq(CallT(SVar("layout-prefix"),[],[]),CallT(SVar("correct-indentation"),[],[Var("elem")])),Var("elem"))),Seq(Assign(Var("indented-prefix-text"),App(Seq(CallT(SVar("conc-strings"),[],[]),CallT(SVar("adapt-indentation"),[],[Var("origin-node")])),NoAnnoList(Tuple([Var("layout-before"),Var("text")])))),Seq(Assign(Var("comments-after"),App(Seq(CallT(SVar("comments-after"),[],[]),Seq(CallT(SVar("correct-indentation"),[],[Var("elem")]),CallT(SVar("adapt-indentation"),[],[Var("origin-node")]))),Var("elem"))),Assign(Var("elem-text"),App(Seq(CallT(SVar("concat-strings"),[],[]),CallT(SVar("trim-trailing-whitespace"),[],[])),NoAnnoList(List([Var("indented-prefix-text"),NoAnnoList(Str("\" \"")),Var("comments-after")])))))))))])))]),Rules([SDefT("adapt-indentation",[],[VarDec("origin-node",ConstType(SortNoArgs("ATerm")))],SRule(Rule(Var("text"),Var("indented-text"),[WhereClause(Seq(Assign(Var("indent-string-new"),App(CallT(SVar("origin-indent"),[],[]),Var("origin-node"))),Assign(Var("indented-text"),App(CallT(SVar("replace-indentation"),[],[Var("indent-string-new"),NoAnnoList(Str("\"\""))]),Var("text")))))]))),SDefT("correct-indentation",[],[VarDec("origin-node",ConstType(SortNoArgs("ATerm")))],SRule(Rule(Var("txt"),Var("indent-corrected-text"),[WhereClause(Seq(Assign(Var("indent-string"),App(GuardedLChoice(CallT(SVar("origin-indent"),[],[]),Id,Build(NoAnnoList(Str("\"\"")))),Var("origin-node"))),Assign(Var("indent-corrected-text"),App(CallT(SVar("replace-indentation"),[],[NoAnnoList(Str("\"\"")),Var("indent-string")]),Var("txt")))))]))),SDefT("replace-indentation",[],[VarDec("new-indent",ConstType(SortNoArgs("ATerm"))),VarDec("old-indent",ConstType(SortNoArgs("ATerm")))],SRule(Rule(Var("text"),Var("indented-text"),[WhereClause(Seq(Assign(Var("indent-value-old"),App(CallT(SVar("indent-value"),[],[]),Var("old-indent"))),Assign(Var("indented-text"),App(Seq(CallT(SVar("remove-indentation"),[],[Var("indent-value-old")]),Seq(CallT(SVar("prefix-lines"),[],[Var("new-indent")]),CallT(SVar("ltrim-chars"),[GuardedLChoice(Match(NoAnnoList(Char("' '"))),Id,GuardedLChoice(Match(NoAnnoList(Char("'\\t'"))),Id,Match(NoAnnoList(Char("'\\n'")))))],[]))),Var("text")))))]))),SDefT("indent-value",[],[],SRule(Rule(Var("indent-string"),Var("indent-value"),[WhereClause(Assign(Var("indent-value"),App(Seq(CallT(SVar("explode-string"),[],[]),Seq(CallT(SVar("take-while"),[GuardedLChoice(Match(NoAnnoList(Char("' '"))),Id,Match(NoAnnoList(Char("'\\t'"))))],[]),CallT(SVar("foldr"),[Build(NoAnnoList(Int("0"))),CallT(SVar("add"),[],[]),GuardedLChoice(Seq(Match(NoAnnoList(Char("' '"))),Build(NoAnnoList(Int("1")))),Id,Seq(Match(NoAnnoList(Char("'\\t'"))),CallT(SVar("TABSIZE"),[],[])))],[]))),Var("indent-string"))))]))),SDefT("remove-indentation",[],[VarDec("n",ConstType(SortNoArgs("ATerm")))],SRule(Rule(Var("txt"),Var("dedented-txt"),[WhereClause(Assign(Var("dedented-txt"),App(CallT(SVar("all-lines"),[CallT(SVar("string-as-chars"),[CallT(SVar("dedent-line-chars"),[],[Var("n")])],[])],[]),Var("txt"))))]))),SDefT("dedent-line-chars",[],[VarDec("n",ConstType(SortNoArgs("ATerm")))],SRule(Rule(Var("chars"),Var("dedented-chars"),[WhereClause(GuardedLChoice(Seq(BA(CallT(SVar("lt"),[],[]),NoAnnoList(Tuple([Var("n"),NoAnnoList(Int("0"))]))),Seq(Assign(Var("indent"),App(Seq(CallT(SVar("copy-char"),[],[]),CallT(SVar("explode-string"),[],[])),NoAnnoList(Tuple([App(CallT(SVar("abs"),[],[]),Var("n")),NoAnnoList(Char("' '"))])))),Assign(Var("dedented-chars"),App(CallT(SVar("conc"),[],[]),NoAnnoList(Tuple([Var("indent"),Var("chars")])))))),Id,GuardedLChoice(Seq(BA(CallT(SVar("gt"),[],[]),NoAnnoList(Tuple([Var("n"),NoAnnoList(Int("0"))]))),Seq(BA(Match(NoAnnoList(ListTail([NoAnnoList(Char("' '"))],Var("tail")))),Var("chars")),Assign(Var("dedented-chars"),App(CallT(SVar("dedent-line-chars"),[],[App(CallT(SVar("dec"),[],[]),Var("n"))]),Var("tail"))))),Id,GuardedLChoice(Seq(BA(CallT(SVar("gt"),[],[]),NoAnnoList(Tuple([Var("n"),NoAnnoList(Int("0"))]))),Seq(BA(Match(NoAnnoList(ListTail([NoAnnoList(Char("'\\t'"))],Var("tail")))),Var("chars")),Assign(Var("dedented-chars"),App(CallT(SVar("dedent-line-chars"),[],[App(CallT(SVar("subt"),[],[]),NoAnnoList(Tuple([Var("n"),RootApp(CallT(SVar("TABSIZE"),[],[]))])))]),Var("tail"))))),Id,Assign(Var("dedented-chars"),Var("chars"))))))])))]),Rules([SDefT("add-separation-before",[VarDec("pp",ConstType(SortNoArgs("ATerm")))],[VarDec("new-elems",ConstType(SortNoArgs("ATerm")))],GuardedLChoice(CallT(SVar("add-separation-before-1"),[CallT(SVar("pp"),[],[])],[Var("new-elems")]),Id,CallT(SVar("add-separation-before-2"),[CallT(SVar("pp"),[],[])],[Var("new-elems")]))),SDefT("add-separation-before-1",[VarDec("pp",ConstType(SortNoArgs("ATerm")))],[VarDec("new-elems",ConstType(SortNoArgs("ATerm")))],SRule(Rule(NoAnnoList(Tuple([Var("origin-node"),Var("text-inserted-after")])),Var("txt-with-separation"),[WhereClause(Seq(BA(Seq(CallT(SVar("origin-text-with-layout"),[],[]),CallT(SVar("string-ends-with"),[],[NoAnnoList(Str("\"\\n\""))])),Var("origin-node")),Seq(Assign(NoAnnoList(Tuple([Var("start-separation"),Var("end-separation")])),App(CallT(SVar("split-before"),[],[]),NoAnnoList(Tuple([App(GuardedLChoice(CallT(SVar("origin-separation"),[],[]),Id,CallT(SVar("origin-separation"),[CallT(SVar("pp"),[],[])],[App(CallT(SVar("Hd"),[],[]),Var("new-elems"))])),Var("origin-node")),NoAnnoList(Str("\"\\n\""))])))),Seq(BA(CallT(SVar("string-as-chars"),[CallT(SVar("map"),[CallT(SVar("is-whitespace"),[],[])],[])],[]),Var("start-separation")),Assign(Var("txt-with-separation"),App(CallT(SVar("concat-strings"),[],[]),NoAnnoList(List([App(CallT(SVar("string-as-chars"),[CallT(SVar("Tl"),[],[])],[]),Var("end-separation")),Var("text-inserted-after"),NoAnnoList(Str("\"\\n\""))]))))))))]))),SDefT("add-separation-before-2",[VarDec("pp",ConstType(SortNoArgs("ATerm")))],[VarDec("new-elems",ConstType(SortNoArgs("ATerm")))],SRule(Rule(NoAnnoList(Tuple([Var("origin-node"),Var("text-inserted-after")])),Var("txt-with-separation"),[WhereClause(Assign(Var("txt-with-separation"),App(CallT(SVar("conc-strings"),[],[]),NoAnnoList(Tuple([App(GuardedLChoice(CallT(SVar("origin-separation"),[],[]),Id,CallT(SVar("origin-separation"),[CallT(SVar("pp"),[],[])],[App(CallT(SVar("Hd"),[],[]),Var("new-elems"))])),Var("origin-node")),Var("text-inserted-after")])))))]))),SDefT("create-separation-after",[],[],SRule(Rule(NoAnnoList(Tuple([Var("separation"),Var("comments-after")])),Var("txt-between"),[WhereClause(Seq(BA(CallT(SVar("string-ends-with"),[],[NoAnnoList(Str("\"\\n\""))]),Var("comments-after")),Seq(Assign(NoAnnoList(Tuple([Var("start-separation"),Var("end-separation")])),App(CallT(SVar("split-before"),[],[]),NoAnnoList(Tuple([Var("separation"),NoAnnoList(Str("\"\\n\""))])))),Assign(Var("txt-between"),App(CallT(SVar("concat-strings"),[],[]),NoAnnoList(List([Var("start-separation"),NoAnnoList(Str("\" \"")),Var("comments-after"),App(CallT(SVar("string-as-chars"),[CallT(SVar("Tl"),[],[])],[]),Var("end-separation"))])))))))]))),SDefT("create-separation-after",[],[],SRule(Rule(NoAnnoList(Tuple([Var("separation"),Var("comments-after")])),Var("txt-between"),[WhereClause(Seq(BA(Not(CallT(SVar("string-ends-with"),[],[NoAnnoList(Str("\"\\n\""))])),Var("comments-after")),Seq(Assign(NoAnnoList(Tuple([Var("start-separation"),Var("end-separation")])),App(CallT(SVar("split-before"),[],[]),NoAnnoList(Tuple([Var("separation"),NoAnnoList(Str("\"\\n\""))])))),Seq(Assign(Var("comments-after-separated"),App(GuardedLChoice(Match(NoAnnoList(Str("\"\""))),Id,BA(CallT(SVar("conc-strings"),[],[]),NoAnnoList(Tuple([NoAnnoList(Str("\" \"")),RootApp(Id)])))),Var("comments-after"))),Assign(Var("txt-between"),App(CallT(SVar("concat-strings"),[],[]),NoAnnoList(List([Var("start-separation"),Var("comments-after-separated"),Var("end-separation")]))))))))]))),SDefT("create-separation-after",[],[],SRule(Rule(NoAnnoList(Tuple([Var("separation"),Var("comments-after")])),Var("txt-between"),[WhereClause(Seq(BA(Not(CallT(SVar("is-substring"),[Build(NoAnnoList(Str("\"\\n\"")))],[])),Var("separation")),Seq(Assign(Var("comments-after-separated"),App(GuardedLChoice(Match(NoAnnoList(Str("\"\""))),Id,BA(CallT(SVar("conc-strings"),[],[]),NoAnnoList(Tuple([NoAnnoList(Str("\" \"")),RootApp(Id)])))),Var("comments-after"))),Assign(Var("txt-between"),App(CallT(SVar("conc-strings"),[],[]),NoAnnoList(Tuple([Var("comments-after-separated"),Var("separation")])))))))])))]),Rules([SDefT("apply-text-changes",[],[],SRule(Rule(NoAnnoList(Tuple([Var("text-changes"),Var("text"),Var("start-offset")])),Var("changed-text"),[WhereClause(Seq(Assign(Var("ordered-text-changes"),App(Seq(CallT(SVar("make-set"),[],[]),Seq(CallT(SVar("filter"),[CallT(SVar("is-modification"),[],[])],[]),CallT(SVar("qsort"),[CallT(SVar("has-smaller-offset"),[],[])],[]))),Var("text-changes"))),Seq(BA(CallT(SVar("assert-valid-textual-changes"),[],[]),Var("ordered-text-changes")),Assign(Var("changed-text"),App(Seq(CallT(SVar("foldr"),[Build(NoAnnoList(Tuple([Var("start-offset"),Var("text")]))),CallT(SVar("apply-textual-change"),[],[])],[]),CallT(SVar("Snd"),[],[])),Var("ordered-text-changes"))))))]))),SDefT("apply-textual-change",[],[],SRule(Rule(NoAnnoList(Tuple([Var("change"),Var("text-info")])),NoAnnoList(Tuple([Var("char-pos"),Var("result-text")])),[WhereClause(Seq(BA(Match(NoAnnoList(Tuple([Var("char-pos"),Var("text-fragment")]))),Var("text-info")),Seq(BA(Match(NoAnnoList(Tuple([Var("change-start"),Var("change-end"),Var("change-text")]))),Var("change")),Seq(Assign(Var("pos-start"),App(CallT(SVar("subt"),[],[]),NoAnnoList(Tuple([Var("change-start"),Var("char-pos")])))),Seq(Assign(Var("pos-end"),App(CallT(SVar("subt"),[],[]),NoAnnoList(Tuple([Var("change-end"),Var("char-pos")])))),Seq(BA(CallT(SVar("string-length"),[],[]),Var("text-fragment")),Assign(Var("result-text"),App(CallT(SVar("replace-in-text"),[],[]),NoAnnoList(Tuple([Var("text-fragment"),Var("change-text"),Var("pos-start"),Var("pos-end")]))))))))))]))),SDefT("replace-in-text",[],[],SRule(Rule(NoAnnoList(Tuple([Var("old-text"),Var("text-change"),Var("pos-start"),Var("pos-end")])),Var("result-text"),[WhereClause(Seq(Assign(Var("old-chars"),App(CallT(SVar("explode-string"),[],[]),Var("old-text"))),Seq(Assign(NoAnnoList(Tuple([Var("prefix"),Wld])),App(CallT(SVar("split-at"),[],[Var("pos-start")]),Var("old-chars"))),Seq(Assign(NoAnnoList(Tuple([Wld,Var("suffix")])),App(CallT(SVar("split-at"),[],[Var("pos-end")]),Var("old-chars"))),Assign(Var("result-text"),App(CallT(SVar("conc-strings"),[],[]),NoAnnoList(Tuple([App(CallT(SVar("implode-string"),[],[]),Var("prefix")),Var("text-change"),App(CallT(SVar("implode-string"),[],[]),Var("suffix"))]))))))))]))),SDefT("has-smaller-offset",[],[],Seq(Match(NoAnnoList(Tuple([NoAnnoList(Tuple([Var("start-x"),Var("end-x"),Var("x")])),NoAnnoList(Tuple([Var("start-y"),Var("end-y"),Var("y")]))]))),Where(GuardedLChoice(BA(CallT(SVar("lt"),[],[]),NoAnnoList(Tuple([Var("start-x"),Var("start-y")]))),Id,Seq(BA(CallT(SVar("eq"),[],[]),NoAnnoList(Tuple([Var("start-x"),Var("start-y")]))),BA(CallT(SVar("lt"),[],[]),NoAnnoList(Tuple([Var("end-x"),Var("end-y")])))))))),SDefT("is-modification",[],[],Not(Match(NoAnnoList(Tuple([Var("t"),Var("t"),NoAnnoList(Str("\"\""))])))))]),Rules([SDefT("assert-valid-textual-changes",[],[],Seq(CallT(SVar("assert-no-overlap"),[],[]),CallT(SVar("assert-valid-offset"),[],[]))),SDefT("assert-no-overlap",[],[],SRule(Rule(As(Var("txt-changes"),NoAnnoList(ListTail([NoAnnoList(Tuple([Var("start-offset"),Var("end-offset"),Wld])),NoAnnoList(Tuple([Var("start-offset'"),Wld,Wld]))],Wld))),Var("txt-changes"),[WithClause(Seq(BA(CallT(SVar("leq"),[],[]),NoAnnoList(Tuple([Var("start-offset"),Var("start-offset'")]))),Seq(BA(CallT(SVar("leq"),[],[]),NoAnnoList(Tuple([Var("end-offset"),Var("start-offset'")]))),BA(CallT(SVar("at-tail"),[CallT(SVar("assert-no-overlap"),[],[])],[]),Var("txt-changes")))))]))),SDefT("assert-no-overlap",[],[],GuardedLChoice(Match(NoAnnoList(List([NoAnnoList(Tuple([Wld,Wld,Wld]))]))),Id,Match(NoAnnoList(List([]))))),SDefT("assert-valid-offset",[],[],CallT(SVar("map"),[CallT(SVar("assert-valid-offset"),[],[])],[])),SDefT("assert-valid-offset",[],[],Seq(Match(NoAnnoList(Tuple([Var("s"),Var("e"),Wld]))),With(BA(CallT(SVar("leq"),[],[]),NoAnnoList(Tuple([Var("s"),Var("e")]))))))])])