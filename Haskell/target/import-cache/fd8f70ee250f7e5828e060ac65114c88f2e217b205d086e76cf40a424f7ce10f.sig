Module("libspoofax/resource/cache",[Imports([Import("libspoofax/resource/path")]),Rules([SDefT("open-import",[VarDec("resolve-path",ConstType(SortNoArgs("ATerm"))),VarDec("parse-file",ConstType(SortNoArgs("ATerm"))),VarDec("record-declarations",ConstType(SortNoArgs("ATerm")))],[],SRule(Rule(Var("import"),Var("import"),[WhereClause(Seq(Assign(Var("path"),App(CallT(SVar("resolve-path"),[],[]),Var("import"))),Seq(Assign(Var("cache-path"),App(CallT(SVar("import-cache-path"),[],[]),Var("path"))),GuardedLChoice(Where(BA(CallT(SVar("IsImported"),[],[]),Var("path"))),Id,Seq(GenDynRules([SetDynRuleMatch(DynRuleId(RDecT("IsImported",[],[])),Var("path"))]),Seq(GuardedLChoice(Seq(BA(CallT(SVar("file-is-newer"),[],[]),NoAnnoList(Tuple([Var("cache-path"),Var("path")]))),Assign(Var("file"),App(CallT(SVar("ReadFromFile"),[],[]),Var("cache-path")))),Id,Seq(Assign(Var("file"),App(CallT(SVar("parse-file"),[],[]),Var("path"))),GuardedLChoice(Where(BA(CallT(SVar("file-exists"),[],[]),Var("path"))),BA(CallT(SVar("try"),[CallT(SVar("WriteToBinaryFile"),[],[])],[]),NoAnnoList(Tuple([Var("cache-path"),Var("file")]))),Id))),DynRuleScope([DynRuleScopeId("CurrentFile")],Seq(GenDynRules([DynRuleAssign(DynRuleId(RDecT("CurrentFile",[],[])),Var("path"))]),BA(CallT(SVar("record-declarations"),[],[]),Var("file"))))))))))]))),SDefT("open-wildcard-import",[VarDec("resolve-path",ConstType(SortNoArgs("ATerm"))),VarDec("parse-file",ConstType(SortNoArgs("ATerm"))),VarDec("record-declarations",ConstType(SortNoArgs("ATerm"))),VarDec("is-source-file",ConstType(SortNoArgs("ATerm")))],[],SRule(Rule(Var("import"),Var("import"),[WhereClause(Seq(Assign(Var("path"),App(CallT(SVar("resolve-path"),[],[]),Var("import"))),Seq(CallT(SVar("readdir"),[],[]),Seq(CallT(SVar("list-loop"),[GuardedLChoice(Where(CallT(SVar("is-source-file"),[],[])),GuardedLChoice(BA(CallT(SVar("open-import"),[Id,CallT(SVar("parse-file"),[],[]),CallT(SVar("record-declarations"),[],[])],[]),NoAnnoList(StringQuotation1("              ",[StringEscape1("              ",Var("path")),QStr("/"),StringEscape1("                     ",RootApp(Id))]))),Id,CallT(SVar("try"),[Match(Var("one-failed"))],[])),Id)],[]),Not(Build(Var("one-failed")))))))]))),SDefT("import-cache-path",[],[],SRule(Rule(Var("full-path"),Var("cache-path"),[WithClause(Seq(Assign(Var("project-path"),RootApp(CallT(SVar("project-path"),[],[]))),Seq(Assign(Var("cache-dir"),App(GuardedLChoice(CallT(SVar("file-exists"),[],[]),Id,CallT(SVar("mkdir"),[],[])),NoAnnoList(StringQuotation1("                                               ",[StringEscape1("                                               ",Var("project-path")),QStr("/target/import-cache")])))),Seq(Assign(Var("full-path'"),App(PrimNoArgs("\"digest\""),Var("full-path"))),Assign(Var("cache-path"),NoAnnoList(StringQuotation1("                        ",[StringEscape1("                        ",Var("cache-dir")),QStr("/"),StringEscape1("                                    ",Var("full-path'")),QStr(".sig")])))))))]))),SDefT("resolve-in-path",[],[VarDec("path",ConstType(SortNoArgs("ATerm")))],SRule(Rule(Var("name"),Var("file"),[WhereClause(Assign(Var("file"),App(Seq(Build(Var("path")),CallT(SVar("getfirst"),[Seq(Build(NoAnnoList(StringQuotation1("                                  ",[StringEscape1("                                  ",RootApp(Id)),QStr("/"),StringEscape1("                                         ",Var("name"))]))),CallT(SVar("file-exists"),[],[]))],[])),Var("name"))))]))),SDefT("file-is-newer",[],[],SRule(Rule(NoAnnoList(Tuple([Var("file1"),Var("file2")])),RootApp(Id),[WhereClause(BA(CallT(SVar("gt"),[],[]),NoAnnoList(Tuple([App(Seq(CallT(SVar("file-exists"),[],[]),CallT(SVar("modification-time"),[],[])),Var("file1")),App(Seq(CallT(SVar("file-exists"),[],[]),CallT(SVar("modification-time"),[],[])),Var("file2"))]))))])))])])